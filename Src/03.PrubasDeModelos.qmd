```         
---
```

title: "Nuevo modelo" format: html editor: visual

Rendering: embed-resources: true ---

# Librerias

```{r}
library(tidyverse)
library(readxl)
library(survival)
library(survminer)
library(xtable)
library(kableExtra)
library(gt) # Para una mejor visulización de las tablas
library(gridExtra) # Para poner gráficos uno al lado del otro
library(ggcorrplot) # Para la creación del gráfico de correlación
library(dplyr)
library(patchwork)
library(scales)
library(viridis)
```

# Datos

```{r, echo = FALSE, warning=FALSE}
# Carga de datos 
Arkansas <- read_excel("~/Downloads/TFG/R/TFGMarcArrom/Input/Arkansas.xlsx", 
                       col_types = c("numeric", "numeric", "text", 
                                     "numeric", "text", "text", "text", 
                                     "numeric", "numeric", "numeric", 
                                     "numeric", "numeric", "numeric", 
                                     "numeric", "numeric", "numeric", 
                                     "numeric", "numeric", "numeric", 
                                     "numeric", "numeric", "numeric", 
                                     "numeric"))

# Reorganización de las variables
Arkansas <- Arkansas[, c("original order", "PATID", "PROT", "SEX", "RACE", "ISOTYPE", "AGE", "B2M", "CRP", "CREAT", "LDH", "ALB", "HGB", "ASPC", "BMPC", "MRI", "Cyto_Abn", "CPS1", "CPR1", "EFS_Censor", "EFS_Time", "OS_Censor", "OS_Time")]

```

# Análisis exploratorio de los datos

La base de datos *Arkansas* está formada por 564 observaciones de las cuales se tomaron 23 variables, de las cuales usaremos X para nuestro estudio.

```{r, echo = FALSE, warning=FALSE}
visualizacion_variables = data.frame(
  nombres_variables = colnames(Arkansas),
  variable_usada = c("No","No","Si","Si","No","Si","Si","Si","Si","Si","Si","Si","Si","Si","Si","Si","Si","No","No","No (de momento)","No (de momento)","Si","Si"),
  explicacion = c("Orden de los datos",
                  "Identificación Paciente",
                  "Tratamiento Recibido (\"TT2\" o \"TT3\")",
                  "Sexo del paciente (\"male\" o \"female\")",
                  "Raza del paciente (\"white\" o \"other\")",
                  "Isotipo del paciente (\"IgA\" , \"IgG\", \"IgM\" o \"IgE\")",
                  "Edad del paciente (en meses)",
                  "Niveles de Microglobulina beta-2 (en mg/l)",
                  "Niveles de Proteína C-Reactiva (en mg/l)",
                  "Niveles de Creatinina (en mg/dl)",
                  "Niveles de Lactato Deshidrogenasa (en U/l)",
                  "Niveles de Albúmina (en g/l)",
                  "Niveles de Hemoglobina (en g/dl)",
                  "Células plasmáticas en aspirado de médula ósea",
                  "Células plasmáticas en biopsia de médula ósea",
                  "Número de lesiones focales",
                  "Indica si presenta mutaciones citogenéticas (0 = No , 1 = Sí)",
                  "Variable sin contexto",
                  "Variable sin contexto",
                  "Indica si el paciente ha recaido (0 = No | 1 = Sí)",
                  "Tiempo sin recaer (en meses)",
                  "Indica si el paciente falleció (0 = No | 1 = Sí)",
                  "Tiempo de supervivencia (en meses)"
                  )
) %>% 
as_tibble
tabla_visualizacion_variables <- visualizacion_variables %>%
  gt() %>%
  tab_header(
    title = "Variables de estudio",
  ) %>%
  fmt_percent(
    columns = c("nombres_variables", "variable_usada", "explicacion"),
    decimals = 1
  ) %>%
  cols_label(
    nombres_variables = "Variable",
    variable_usada = "Analizada",
    explicacion = "Explicación"
  ) %>%
  tab_options(
    table.font.size = px(12),
    heading.title.font.size = px(18),
  )
tabla_visualizacion_variables



```

Algunos de los pacientes presentan censura, es decir, en su último control, este, no había fallecido. Además, algunas de las observaciones tienen datos faltantes, veamos cuales son estas variables y cuantos datos faltan para cada una y contabilicemos el nivel de censura que presentan los datos.

```{r, echo = FALSE, warning=FALSE}
# Crear una copia del dataset para no modificar el original
Arkansas_copy <- Arkansas

# Considerar los valores "nonsecretory" como faltantes en la columna ISOTYPE
Arkansas_copy$ISOTYPE[Arkansas$ISOTYPE == "Nonsecretory"] <- NA

# Calcular el número de datos faltantes por cada variable (columna)
faltantes_por_variable <- colSums(is.na(Arkansas_copy))

# Filtrar las variables con al menos un dato faltante
faltantes_por_variable <- faltantes_por_variable[faltantes_por_variable > 0]

# Crear una tabla resumen con los resultados
datos_faltantes <- data.frame(Variable = names(faltantes_por_variable), 
                              Faltantes = faltantes_por_variable) %>% as_tibble


Arkansas_SinDatosFaltantes = na.omit(Arkansas)


# Asumimos que 'datos_faltantes' es un dataframe con columnas 'Variable' y 'Faltantes'
tabla_datos_faltantes <- datos_faltantes %>%
  arrange(desc(Faltantes)) %>%  # Ordenar por la columna de faltantes en orden descendente
  gt() %>%
  tab_header(
    title = "Datos faltantes por variable"
  )  %>%
  cols_label(
    Variable = "Variable",
    Faltantes = "Datos faltantes"
  ) %>%
  tab_options(
    table.font.size = px(12),
    heading.title.font.size = px(18)
  )
# Mostrar la tabla
tabla_datos_faltantes


observaciones_con_censura = sum(Arkansas$OS_Censor)

observaciones_con_censura
```

También es interesante determinar si los niveles de las variables clínicas se encuentran en niveles sanos. Para eso, añadimos a nuestra base de datos estas variables. Los niveles sanos de las diferentes variables se han obtenido de MayoClinic y MedlinePlus.

```{r, echo = FALSE, warning=FALSE}
Arkansas <- Arkansas %>%
  mutate(
    AGE_flag = ifelse(AGE <= 50, 0, 1), # 0 = "Menor a 50 años", 1 = "Mayor a 50 años"
    B2M_flag = ifelse(B2M <= 2.7, 0, 1),  # 0 = "Nivel sano" , 1 = "Nivel NO sano"
    CREAT_flag = ifelse(SEX == "male" & CREAT >= 0.74 & CREAT <= 1.35, 0, 
                 ifelse(SEX == "female" & CREAT >= 0.54 & CREAT <= 1.04, 0, 1)), # 0 = "Nivel sano" , 1 = "Nivel NO sano"
    
    CRP_flag = ifelse(CRP <= 1, 0, # 0 = "Nivel sano" 
                ifelse(CRP > 1 & CRP <= 10, 1,2)), # 2 = "Inflamación moderada" , # 3 = "Inflamación marcada"
    
    LDH_flag = ifelse(LDH >= 122 & LDH <= 222, 0, 1),  # 0 = "Nivel sano" , 1 = "Nivel NO sano"
    ALB_flag = ifelse(ALB >= 3.5 & ALB <= 5, 0, 1), # 0 = "Nivel sano" , "1 = "Nivel NO sano"
    
    # Para MRI no hay niveles normales, lo dividimos por quantiles. 
    MRI_flag =  ifelse(MRI <= quantile(na.omit(Arkansas$MRI), 0.25),0,
                ifelse(MRI >= quantile(na.omit(Arkansas$MRI), 0.25) & MRI <= quantile(na.omit(Arkansas$MRI), 0.5),1,
                ifelse(MRI >= quantile(na.omit(Arkansas$MRI), 0.5) & MRI <= quantile(na.omit(Arkansas$MRI), 0.75),2,3))),
    
    HGB_flag = ifelse(SEX == "male" & HGB >= 13.8 & HGB <= 17.2, 0, 
                 ifelse(SEX == "female" & HGB >= 12.1 & HGB <= 15.1, 0, 1)) # 0 = "Nivel sano" , "1 = "Nivel NO sano"
  )

numero_observaciones = nrow(Arkansas)
```




```{r B2M, echo = FALSE, warning=FALSE}
proporcionB2M_sano = round(nrow(Arkansas[Arkansas$B2M_flag == 0,]) / numero_observaciones,4)
proporcionB2M_mal = round(nrow(Arkansas[Arkansas$B2M_flag == 1, ]) / numero_observaciones,4)

custom_colors <- viridis(2, option = "viridis")  # Paleta de dos colores

# Crear una variable ficticia para la leyenda
Arkansas$Estado <- ifelse(Arkansas$B2M_flag == 0, "Saludable", "No saludable")

grafico_B2M = Arkansas %>%
  ggplot(aes(x = B2M, fill = Estado)) +  # Asociar 'Estado' al argumento fill
  geom_histogram(color = "black", alpha = 1, binwidth = 3, size = 0.5) +
  
  # Personalización de la leyenda con proporciones
  scale_fill_manual(
    name = "Estado", 
    values = c("lightblue", "lightgreen"),
    labels = c(
      paste0("No saludable: ", proporcionB2M_mal * 100, "%"),
      paste0("Saludable: ", proporcionB2M_sano * 100, "%")
    )
  ) +
  
  # Títulos
  ggtitle("Distribución de B2M") +
  labs(x = "Nivel de B2M", y = "Frecuencia") +
  theme_classic() +
  theme(
    plot.title = element_text(size = 21, face = "bold", hjust = 0.5), # Título principal
    axis.text.x = element_text(size = 10),  # Tamaño del texto del eje X
    axis.text.y = element_text(size = 14),  # Tamaño del texto del eje Y
    axis.title.x = element_text(size = 18), # Tamaño del título del eje X
    axis.title.y = element_text(size = 18),  # Tamaño del título del eje Y
    legend.text = element_text(size = 15),  # Tamaño del texto de la leyenda
    legend.title = element_text(size = 18), # Tamaño y estilo del título de la leyenda
    legend.key.size = unit(0.7, "cm"),  # Tamaño de las claves de la leyenda
    legend.position = "top"  # Posición de la leyenda
  ) +
  scale_x_continuous(breaks = pretty_breaks(n = 20))
# Gira el gráfico a horizontal
  
# Guardar el gráfico como PDF
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/grafico_barras_B2M.pdf", 
       plot = grafico_B2M,  # Extraer solo el gráfico principal
       width = 10, height = 7, device = "pdf")  # Ajusta el tamaño y formato

print(grafico_B2M)

```






```{r}
proporcionCREAT_sano_hombres = round(nrow(Arkansas[Arkansas$CREAT_flag == 0 & Arkansas$SEX == "male",]) / numero_hombres,4)
proporcionCREAT_mal_hombres = round(nrow(Arkansas[Arkansas$CREAT_flag == 1 & Arkansas$SEX == "male", ]) / numero_hombres, 4)

Arkansas$Estado_hombres <- ifelse(Arkansas$CREAT_flag == 0 & Arkansas$SEX == "male", "Saludable", "No saludable")

grafico_CREAT_MALE = Arkansas %>%
  filter(SEX == "male") %>%
  ggplot(aes(x = CREAT, fill = Estado_hombres)) +  # Asociar 'Estado_hombres' al argumento fill
  geom_histogram(color = "black", alpha = 1, binwidth = 0.5, size = 0.5) +
  
  # Personalización de la leyenda con proporciones
  scale_fill_manual(
    name = "Estado",
    values = c("lightblue", "lightgreen"),
    labels = c(
      paste0("No saludable: ", proporcionCREAT_mal_hombres * 100, "%"),
      paste0("Saludable: ", proporcionCREAT_sano_hombres * 100, "%")
    )
  ) +
  
  # Títulos
  ggtitle("Distribución de CREAT en hombres") +
  labs(x = "Nivel de Creatinina", y = "Frecuencia") +
  theme_classic() +
  theme(
    plot.title = element_text(size = 21, face = "bold", hjust = 0.5), # Título principal
    axis.text.x = element_text(size = 10),  # Tamaño del texto del eje X
    axis.text.y = element_text(size = 14),  # Tamaño del texto del eje Y
    axis.title.x = element_text(size = 18), # Tamaño del título del eje X
    axis.title.y = element_text(size = 18),  # Tamaño del título del eje Y
    legend.text = element_text(size = 15),  # Tamaño del texto de la leyenda
    legend.title = element_text(size = 18), # Tamaño y estilo del título de la leyenda
    legend.key.size = unit(0.7, "cm"),  # Tamaño de las claves de la leyenda
    legend.position = "top"  # Posición de la leyenda
  ) +
  scale_x_continuous(breaks = pretty_breaks(n = 10))

# Guardar el gráfico como PDF
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/grafico_barras_CREAT_MALE.pdf", 
       plot = grafico_CREAT_MALE, 
       width = 10, height = 7, device = "pdf")

print(grafico_CREAT_MALE)

```
```{r}
proporcionCREAT_sano_mujeres = round(nrow(Arkansas[Arkansas$CREAT_flag == 0 & Arkansas$SEX == "female",]) / numero_mujeres,4)
proporcionCREAT_mal_mujeres = round(nrow(Arkansas[Arkansas$CREAT_flag == 1 & Arkansas$SEX == "female", ]) / numero_mujeres,4)

Arkansas$Estado_mujeres <- ifelse(Arkansas$CREAT_flag == 0 & Arkansas$SEX == "female", "Saludable", "No saludable")

grafico_CREAT_FEMALE = Arkansas %>%
  filter(SEX == "female") %>%
  ggplot(aes(x = CREAT, fill = Estado_mujeres)) +  # Asociar 'Estado_mujeres' al argumento fill
  geom_histogram(color = "black", alpha = 1, binwidth = 0.5, size = 0.5) +
  
  # Personalización de la leyenda con proporciones
  scale_fill_manual(
    name = "Estado",
    values = c("lightblue", "lightgreen"),
    labels = c(
      paste0("No saludable: ", proporcionCREAT_mal_mujeres * 100, "%"),
      paste0("Saludable: ", proporcionCREAT_sano_mujeres * 100, "%")
    )
  ) +
  
  # Títulos
  ggtitle("Distribución de CREAT en mujeres") +
  labs(x = "Nivel de Creatinina", y = "Frecuencia") +
  theme_classic() +
  theme(
    plot.title = element_text(size = 21, face = "bold", hjust = 0.5), # Título principal
    axis.text.x = element_text(size = 10),  # Tamaño del texto del eje X
    axis.text.y = element_text(size = 14),  # Tamaño del texto del eje Y
    axis.title.x = element_text(size = 18), # Tamaño del título del eje X
    axis.title.y = element_text(size = 18),  # Tamaño del título del eje Y
    legend.text = element_text(size = 15),  # Tamaño del texto de la leyenda
    legend.title = element_text(size = 18), # Tamaño y estilo del título de la leyenda
    legend.key.size = unit(0.7, "cm"),  # Tamaño de las claves de la leyenda
    legend.position = "top"  # Posición de la leyenda
  ) +
  scale_x_continuous(breaks = pretty_breaks(n = 10))

# Guardar el gráfico como PDF
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/grafico_barras_CREAT_FEMALE.pdf", 
       plot = grafico_CREAT_FEMALE, 
       width = 10, height = 7, device = "pdf")

print(grafico_CREAT_FEMALE)

```

```{r}
# Proporciones calculadas
proporcionCRP_sano = round(nrow(Arkansas[Arkansas$CRP_flag == 0,]) / numero_observaciones,4)
proporcionCRP_moderado = round(nrow(Arkansas[Arkansas$CRP_flag == 1, ]) / numero_observaciones,4)
proporcionCRP_alto = round(nrow(Arkansas[Arkansas$CRP_flag == 2, ]) / numero_observaciones,4)

# Crear una variable categórica para la leyenda
Arkansas$Estado_CRP <- ifelse(
  Arkansas$CRP_flag == 0, "Saludable",
  ifelse(Arkansas$CRP_flag == 1, "Moderado", "Alto")
)

# Colores accesibles para los rangos
custom_colors <- c("Saludable" = "green", "Moderado" = "yellow", "Alto" = "red")

# Gráfico de CRP
grafico_CRP <- Arkansas %>%
  ggplot(aes(x = CRP, fill = Estado_CRP)) +
  geom_histogram(color = "black", alpha = 1, binwidth = 6, size = 0.5) +

  # Personalización de la leyenda
  scale_fill_manual(
    name = "Estado",
    values = custom_colors,
    labels = c(
      paste0("Alto: ", proporcionCRP_alto * 100, "%"),
      paste0("Moderado: ", proporcionCRP_moderado * 100, "%"),
      paste0("Saludable: ", proporcionCRP_sano * 100, "%")
    )
  ) +
  
  # Títulos y etiquetas
  ggtitle("Distribución de CRP") +
  labs(x = "Nivel de CRP", y = "Frecuencia") +
  theme_classic() +
  theme(
    plot.title = element_text(size = 21, face = "bold", hjust = 0.5),
    axis.text.x = element_text(size = 10),
    axis.text.y = element_text(size = 14),
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    legend.text = element_text(size = 14),
    legend.title = element_text(size = 17),
    legend.key.size = unit(0.7, "cm"),
    legend.position = "top"
  ) 

  

# Guardar el gráfico como PDF
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/grafico_barras_CRP.pdf", 
       plot = grafico_CRP, 
       width = 10, height = 7, device = "pdf")

# Imprimir el gráfico
print(grafico_CRP)

```

```{r}
# Proporciones calculadas
proporcionLDH_sano = round(nrow(Arkansas[Arkansas$LDH_flag == 0,]) / numero_observaciones,4)
proporcionLDH_mal = round(nrow(Arkansas[Arkansas$LDH_flag == 1, ]) / numero_observaciones,4)

# Crear una variable categórica para la leyenda
Arkansas$Estado_LDH <- ifelse(Arkansas$LDH_flag == 0, "Saludable", "No saludable")

# Paleta de colores accesible
custom_colors <- c("Saludable" = "lightgreen", "No saludable" = "lightblue")

# Gráfico de LDH
grafico_LDH = Arkansas %>%
  ggplot(aes(x = LDH, fill = Estado_LDH)) +
  geom_histogram(color = "black", alpha = 1, binwidth = 10, size = 0.5) +
  
  # Personalización de la leyenda
  scale_fill_manual(
    name = "Estado",
    values = custom_colors,
    labels = c(
      paste0("No saludable: ", proporcionLDH_mal * 100, "%"),
      paste0("Saludable: ", proporcionLDH_sano * 100, "%")
    )
  ) +
  
  # Títulos y etiquetas
  ggtitle("Distribución de LDH") +
  labs(x = "Nivel de LDH", y = "Frecuencia") +
  theme_classic() +
  theme(
    plot.title = element_text(size = 21, face = "bold", hjust = 0.5),
    axis.text.x = element_text(size = 10),
    axis.text.y = element_text(size = 14),
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    legend.text = element_text(size = 15),
    legend.title = element_text(size = 18),
    legend.key.size = unit(0.7, "cm"),
    legend.position = "top"
  ) 
  
# Guardar el gráfico como PDF
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/grafico_barras_LDH.pdf", 
       plot = grafico_LDH, 
       width = 10, height = 7, device = "pdf")

# Imprimir el gráfico
print(grafico_LDH)

```


```{r}
# Proporciones calculadas
proporcionALB_sano = round(nrow(Arkansas[Arkansas$ALB_flag == 0,]) / numero_observaciones,4)
proporcionALB_mal = round(nrow(Arkansas[Arkansas$ALB_flag == 1, ]) / numero_observaciones,4)

# Crear una variable categórica para la leyenda
Arkansas$Estado_ALB <- ifelse(Arkansas$ALB_flag == 0, "Saludable", "No saludable")

# Paleta de colores accesible
custom_colors <- c("Saludable" = "lightgreen", "No saludable" = "lightblue")

# Gráfico de ALB
grafico_ALB = Arkansas %>%
  ggplot(aes(x = ALB, fill = Estado_ALB)) +
  geom_histogram(color = "black", alpha = 1, binwidth = 0.1, size = 0.5) +
  
  # Personalización de la leyenda
  scale_fill_manual(
    name = "Estado",
    values = custom_colors,
    labels = c(
      paste0("No saludable: ", proporcionALB_mal * 100, "%"),
      paste0("Saludable: ", proporcionALB_sano * 100, "%")
    )
  ) +
  
  # Títulos y etiquetas
  ggtitle("Distribución de ALB") +
  labs(x = "Nivel de ALB", y = "Frecuencia") +
  theme_classic() +
  theme(
    plot.title = element_text(size = 21, face = "bold", hjust = 0.5),
    axis.text.x = element_text(size = 10),
    axis.text.y = element_text(size = 14),
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    legend.text = element_text(size = 15),
    legend.title = element_text(size = 18),
    legend.key.size = unit(0.7, "cm"),
    legend.position = "top"
  ) 
# Guardar el gráfico como PDF
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/grafico_barras_ALB.pdf", 
       plot = grafico_ALB, 
       width = 10, height = 7, device = "pdf")

# Imprimir el gráfico
print(grafico_ALB)

```



```{r HGB, echo=FALSE , warning= FALSE}
numero_hombres = nrow(Arkansas[Arkansas$SEX == "male", ])
numero_mujeres = nrow(Arkansas[Arkansas$SEX == "female", ])
proporcionHGB_sano_hombres = round(nrow(Arkansas[Arkansas$HGB_flag == 0 & Arkansas$SEX == "male",]) / numero_hombres,4)
proporcionHGB_mal_hombres = round(nrow(Arkansas[Arkansas$HGB_flag == 1 & Arkansas$SEX == "male", ]) / numero_hombres, 4)
proporcionHGB_sano_mujeres = round(nrow(Arkansas[Arkansas$HGB_flag == 0 & Arkansas$SEX == "female",]) / numero_mujeres,4)
proporcionHGB_mal_mujeres = round(nrow(Arkansas[Arkansas$HGB_flag == 1 & Arkansas$SEX == "female", ]) / numero_mujeres,4)


grafico_HGB_MALE = Arkansas %>%
  filter(SEX == "male") %>%
  ggplot(aes(x = HGB)) +
  geom_histogram(fill = "#1f78b4", color = "black", alpha = 0.9) +
  # Rectangulo valores normales
  annotate("rect", xmin = 13.8, xmax = 17.2 , ymin = -1, ymax = Inf, alpha = 0.45,, fill = "lightgreen", bins = 20) +  # Cambiado el color del rectángulo
  geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = 0, ymax = 0, fill = "Niveles Saludables"), ) +
  scale_fill_manual(name = " ", values = "lightgreen" )+
  # Títulos
  ggtitle("Distribución de HGB en hombres") +
  labs(x = "Nivel de Hemoglobina", y = "Frecuencia") +
  scale_x_continuous(breaks = pretty_breaks(n = 10)) + 
  theme_classic() +
  coord_flip() + # Gira el gráfico a horizontal
   # Añadir el recuadro con la proporción

   # Añadir el recuadro con la proporción
    
  annotate("rect", 
           xmin = 6.9, xmax = 8.5, 
           ymin = 21, ymax = 40, 
           alpha = 0.2, fill = "grey")+
  annotate("text", x = 8.1, y = 39, hjust = 1, vjust = 1, 
           label = paste0("Rango saludable: ", proporcionHGB_sano_hombres * 100, "%"),
           color = "black", size = 3.5, fontface = "bold") + # Ajusta el tamaño y posición si es necesario
  annotate("text", x = 7.5, y = 39, hjust = 1,vjust = 1, 
           label = paste0("Rango no saludable: ", proporcionHGB_mal_hombres * 100, "%"),
           color = "black", size = 3.5, fontface = "bold")   # Ajusta el tamaño y posición si es necesario
  
grafico_HGB_FEMALE = Arkansas %>%
  filter(SEX == "female") %>%
  ggplot(aes(x = HGB)) +
  geom_histogram(fill = "#1f78b4", color = "black", alpha = 0.9) +
  # Rectangulo valores normales
  annotate("rect", xmin = 12.1, xmax = 15.1 , ymin = -1, ymax = Inf, alpha = 0.45,, fill = "lightgreen",bins = 20) +  # Cambiado el color del rectángulo
  geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = 0, ymax = 0, fill = "Niveles Saludables"), ) +
  scale_fill_manual(name = " ", values = "lightgreen" )+
  # Títulos
  ggtitle("Distribución de HGB en mujeres") +
  labs(x = "Nivel de Hemoglobina", y = "Frecuencia") +
  theme_classic() +
   scale_x_continuous(breaks = pretty_breaks(n = 10)) + 
  coord_flip() + # Gira el gráfico a horizontal

   # Añadir el recuadro con la proporción
  annotate("rect", 
           xmin = 6.3, xmax = 7.5, 
           ymin = 11.8, ymax = 23, 
           alpha = 0.2, fill = "grey")+
  annotate("text", x = 7.3, y = 22, hjust = 1, vjust = 1, 
           label = paste0("Rango saludable: ", proporcionHGB_sano_mujeres * 100, "%"),
           color = "black", size = 3.5, fontface = "bold") + # Ajusta el tamaño y posición si es necesario
  annotate("text", x = 6.8, y = 22, hjust = 1,vjust = 1, 
           label = paste0("Rango no saludable: ", proporcionHGB_mal_mujeres * 100, "%"),
           color = "black", size = 3.5, fontface = "bold")   # Ajusta el tamaño y posición si es necesario
  


# Guardar el gráfico como PDF
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/grafico_barras_HGB_MALE.pdf", 
       plot = grafico_HGB_MALE,  # Extraer solo el gráfico principal
       width = 10, height = 7, device = "pdf")  # Ajusta el tamaño y formato

print(grafico_HGB_MALE)

# Guardar el gráfico como PDF
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/grafico_barras_HGB_FEMALE.pdf", 
       plot = grafico_HGB_FEMALE,  # Extraer solo el gráfico principal
       width = 10, height = 7, device = "pdf")  # Ajusta el tamaño y formato

print(grafico_HGB_FEMALE)

```
```{r}
# Proporciones calculadas
proporcionHGB_sano_hombres = round(nrow(Arkansas[Arkansas$HGB_flag == 0 & Arkansas$SEX == "male",]) / numero_hombres,4)
proporcionHGB_mal_hombres = round(nrow(Arkansas[Arkansas$HGB_flag == 1 & Arkansas$SEX == "male", ]) / numero_hombres, 4)

# Variable categórica
Arkansas$Estado_HGB_MALE <- ifelse(Arkansas$HGB_flag == 0 & Arkansas$SEX == "male", "Saludable", "No saludable")

# Paleta accesible
custom_colors <- c("Saludable" = "lightgreen", "No saludable" = "lightblue")

# Gráfico para hombres
grafico_HGB_MALE = Arkansas %>%
  filter(SEX == "male") %>%
  ggplot(aes(x = HGB, fill = Estado_HGB_MALE)) +
  geom_histogram(color = "black", alpha = 1, binwidth = 0.5, size = 0.5) +
  
  # Personalización de la leyenda
  scale_fill_manual(
    name = "Estado",
    values = custom_colors,
    labels = c(
      paste0("No saludable: ", proporcionHGB_mal_hombres * 100, "%"),
      paste0("Saludable: ", proporcionHGB_sano_hombres * 100, "%")
    )
  ) +
  
  # Títulos
  ggtitle("Distribución de HGB en hombres") +
  labs(x = "Nivel de Hemoglobina", y = "Frecuencia") +
  scale_x_continuous(breaks = pretty_breaks(n = 10)) +
  theme_classic() +
  theme(
    plot.title = element_text(size = 21, face = "bold", hjust = 0.5),
    axis.text.x = element_text(size = 10),
    axis.text.y = element_text(size = 14),
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    legend.text = element_text(size = 15),
    legend.title = element_text(size = 18),
    legend.key.size = unit(0.7, "cm"),
    legend.position = "top"
  ) 
print(grafico_HGB_MALE)

```

```{r}
# Proporciones calculadas
proporcionHGB_sano_mujeres = round(nrow(Arkansas[Arkansas$HGB_flag == 0 & Arkansas$SEX == "female",]) / numero_mujeres,4)
proporcionHGB_mal_mujeres = round(nrow(Arkansas[Arkansas$HGB_flag == 1 & Arkansas$SEX == "female", ]) / numero_mujeres,4)

# Variable categórica
Arkansas$Estado_HGB_FEMALE <- ifelse(Arkansas$HGB_flag == 0 & Arkansas$SEX == "female", "Saludable", "No saludable")

# Gráfico para mujeres
grafico_HGB_FEMALE = Arkansas %>%
  filter(SEX == "female") %>%
  ggplot(aes(x = HGB, fill = Estado_HGB_FEMALE)) +
  geom_histogram(color = "black", alpha = 1, binwidth = 0.5, size = 0.5) +
  
  # Personalización de la leyenda
  scale_fill_manual(
    name = "Estado",
    values = custom_colors,
    labels = c(
      paste0("No saludable: ", proporcionHGB_mal_mujeres * 100, "%"),
      paste0("Saludable: ", proporcionHGB_sano_mujeres * 100, "%")
    )
  ) +
  
  # Títulos
  ggtitle("Distribución de HGB en mujeres") +
  labs(x = "Nivel de Hemoglobina", y = "Frecuencia") +
  scale_x_continuous(breaks = pretty_breaks(n = 10)) +
  theme_classic() +
  theme(
    plot.title = element_text(size = 21, face = "bold", hjust = 0.5),
    axis.text.x = element_text(size = 10),
    axis.text.y = element_text(size = 14),
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    legend.text = element_text(size = 15),
    legend.title = element_text(size = 18),
    legend.key.size = unit(0.7, "cm"),
    legend.position = "top"
  )

print(grafico_HGB_FEMALE)

```


```{r AGE, echo = FALSE, warning=FALSE}

grafico_AGE = Arkansas %>%
  ggplot(aes(x = AGE)) +
  geom_histogram(fill = "#1f78b4", color = "black", alpha = 0.9, bins = 20) +

  # Títulos
  ggtitle("Distribución de AGE",subtitle = "") +
  labs(x = "Edad (años)", y = "Frecuencia") +
  scale_x_continuous(breaks = pretty_breaks(n = 10)) + 
  theme_classic() +
    theme(
  plot.title = element_text(size = 20, face = "bold", hjust = 0.5), # Título principal
  axis.text.x = element_text(size = 14),  # Tamaño del texto del eje X
  axis.text.y = element_text(size = 14),  # Tamaño del texto del eje Y
  axis.title.x = element_text(size = 18), # Tamaño del título del eje X
  axis.title.y = element_text(size = 18)  # Tamaño del título del eje Y
)+
  coord_flip()  # Gira el gráfico a horizontal
   # Añadir el recuadro con la proporción

# Guardar el gráfico como PDF
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/grafico_barras_AGE.pdf", 
       plot = grafico_AGE,  # Extraer solo el gráfico principal
       width = 10, height = 7, device = "pdf")  # Ajusta el tamaño y formato

print(grafico_AGE)
```

```{r}

grafico_OS_Time = Arkansas %>%
  ggplot(aes(x = OS_Time)) +
  geom_histogram(fill = "#1f78b4", color = "black", alpha = 0.9, bins = 20) +

  # Títulos
  ggtitle("Distribución de OS_Time",subtitle = "") +
  labs(x = "Tiempo (meses)", y = "Frecuencia") +
  scale_x_continuous(breaks = pretty_breaks(n = 10)) + 
  theme_classic() +
    theme(
  plot.title = element_text(size = 20, face = "bold", hjust = 0.5), # Título principal
  axis.text.x = element_text(size = 14),  # Tamaño del texto del eje X
  axis.text.y = element_text(size = 14),  # Tamaño del texto del eje Y
  axis.title.x = element_text(size = 18), # Tamaño del título del eje X
  axis.title.y = element_text(size = 18)  # Tamaño del título del eje Y
)+
  coord_flip()  # Gira el gráfico a horizontal
   # Añadir el recuadro con la proporción
grafico_OS_Time
```







#### Variables categoricas

```{r}
# Crear el gráfico de barras
ggplot(na.omit(Arkansas), aes(x = ISOTYPE)) +
  geom_bar(fill = "#56B4E9", color = "black") +
  
  # Añadir las frecuencias sobre cada barra
  geom_text(stat = "count", aes(label = ..count..), vjust = -0.5, size = 5) +
  
  # Mejorar la estética del gráfico
  labs(title = "Distribución de ISOTYPE", x = "Isotipo", y = "Frecuencia") +
  ylim(0, max(table(Arkansas$ISOTYPE)) * 1.1) +  # Aumenta el límite del eje y un 10%
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.text = element_text(size = 12),
    axis.title = element_text(size = 14)
  )
```

```{r}
# Crear el gráfico de barras
ggplot(na.omit(Arkansas), aes(x = SEX)) +
  geom_bar(fill = "#56B4E9", color = "black") +
  
  # Añadir las frecuencias sobre cada barra
  geom_text(stat = "count", aes(label = ..count..), vjust = -0.5, size = 5) +
  
  # Mejorar la estética del gráfico
  labs(title = "Distribución de SEX", x = "Sexo", y = "Frecuencia") +
  ylim(0, max(table(Arkansas$ISOTYPE)) * 1.1) +  # Aumenta el límite del eje y un 10%
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.text = element_text(size = 12),
    axis.title = element_text(size = 14)
  )
```

```{r}
# Crear el gráfico de barras
ggplot(na.omit(Arkansas), aes(x = RACE)) +
  geom_bar(fill = "#56B4E9", color = "black") +
  
  # Añadir las frecuencias sobre cada barra
  geom_text(stat = "count", aes(label = ..count..), vjust = -0.5, size = 5) +
  
  # Mejorar la estética del gráfico
  labs(title = "Distribución de RACE", x = "Raza", y = "Frecuencia") +
  ylim(0, max(table(Arkansas$RACE)) * 1.1) +  # Aumenta el límite del eje y un 10%
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.text = element_text(size = 12),
    axis.title = element_text(size = 14)
  )

```

```{r}
ggplot(Arkansas, aes(x = Cyto_Abn)) +
  geom_bar(fill = "steelblue") +
  labs(title = "Diagrama de Barras de Cyto_Abn", x = "Alteraciones Citogenéticas", y = "Frecuencia") +
  scale_x_continuous(breaks = c(0, 1), labels = c("Sin alteraciones", "Con alteraciones")) +
  geom_text(stat = "count", aes(label = ..count..), vjust = -0.5, size = 5) +
  ylim(0,400)+
  theme_minimal()+
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.text = element_text(size = 12),
    axis.title = element_text(size = 14)
  )
```

```{r}
# Seleccionar las variables de interés y omitir los NA
variables_interes <- Arkansas[,7:16] %>%
  na.omit()

# Calcular la matriz de correlación
matriz_correlacion <- cor(variables_interes)

# Generar el gráfico de correlación
ggcorrplot(matriz_correlacion, 
           hc.order = TRUE,         # Ordenar jerárquicamente
           type = "lower",          # Mostrar solo la mitad inferior
           lab = TRUE,              # Añadir los valores de correlación
           lab_size = 3.5,          # Tamaño del texto de los valores
           colors = c("#4575b4", "#f7f7f7", "#d73027")) +  # Colores personalizados
  ggtitle("Mapa de Correlación de Variables") +    # Añadir título
  labs(x = "Variables", y = "Variables") +         # Títulos de los ejes
  theme(plot.title = element_text(hjust = 0.5, size = 16),   # Centrar el título y ajustar tamaño
        axis.title.x = element_text(size = 14),   # Tamaño del título del eje x
        axis.title.y = element_text(size = 14))   # Tamaño del título del eje y

```
```{r}
library("factoextra")
Arkansas_ACP <- prcomp(variables_interes, scale = TRUE )
Arkansas_ACP
lambdas = get_eigenvalue(Arkansas_ACP)
lambdas
fviz_eig(Arkansas_ACP, addlabels = TRUE,ylim=c(0,100))

fviz_pca_var(Arkansas_ACP, col.var = "contrib", repel = TRUE)

var = get_pca_var(Arkansas_ACP)
fviz_cos2(Arkansas_ACP, choice = "var", axes = 1:3)
Arkansas_ACP$rotation

fviz_pca_biplot(Arkansas_ACP, repel = TRUE)
```


# MODELO DE COX [SIN DATOS FALTANTES]{.underline}

Para la primera sección, trabajaremos sin los datos faltantes. Definimos un nuevo data frame eliminando estas observaciones.

```{r}
# Consideramos la base de datos sin datos faltantes.
Arkansas_SinDatosFaltantes = na.omit(Arkansas)
Arkansas_SinDatosFaltantes = Arkansas_SinDatosFaltantes[!Arkansas_SinDatosFaltantes$ISOTYPE == "Nonsecretory",]

# Hay que convertir la Variable ISOTYPE en variables "dummies"
Arkansas_SinDatosFaltantes <- model.matrix(~ISOTYPE - 1, data = Arkansas_SinDatosFaltantes) %>%
  as.data.frame() %>%
  cbind(Arkansas_SinDatosFaltantes)
```

Calculamos, para cada variable, un modelo de Cox univariable para observar la significancia individual que tienen.

```{r}
covariates <- c("AGE", "SEX", "PROT" ,"B2M", "ISOTYPEFLC", "ISOTYPEIgA", "ISOTYPEIgD", "ISOTYPEIgG", "RACE" ,"CRP", "CREAT","LDH","ALB","HGB", "ASPC","BMPC", "MRI","Cyto_Abn")
univ_formulas <- sapply(covariates,
                        function(x) as.formula(paste('Surv(OS_Time, OS_Censor)~', x)))
                        
univ_models <- lapply( univ_formulas, function(x){coxph(x, data = Arkansas_SinDatosFaltantes)})
# Extract data 
univ_results <- lapply(univ_models,
                       function(x){ 
                          x <- summary(x)
                          p.value<-signif(x$wald["pvalue"], digits=2)
                          wald.test<-signif(x$wald["test"], digits=2)
                          beta<-signif(x$coef[1], digits=2);#coeficient beta
                          HR <-signif(x$coef[2], digits=2);#exp(beta)
                          HR.confint.lower <- signif(x$conf.int[,"lower .95"], 2)
                          HR.confint.upper <- signif(x$conf.int[,"upper .95"],2)
                          HR <- paste0(HR, " (", 
                                       HR.confint.lower, "-", HR.confint.upper, ")")
                          res<-c(beta, HR, wald.test, p.value)
                          names(res)<-c("beta", "HR (95% CI for HR)", "wald.test", 
                                        "p.value")
                          return(res)
                          #return(exp(cbind(coef(x),confint(x))))
                         })
res <- t(as.data.frame(univ_results, check.names = FALSE))
as.data.frame(res)
# Generar el archivo LaTeX con la tabla
tabla_latex <- xtable(res, caption = "Descripción del modelo univariante", label = "Tabla: Cox Univariante")

# Guardar el archivo LaTeX en un archivo .tex
print(tabla_latex, file = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/tabla_cox_univariante.tex", include.rownames = TRUE)


observaciones_con_censura = sum(Arkansas$OS_Censor)
```

#### Análisis del modelo univariable

El P.valor de las variables de SEX, PROT, CRP y ISOTYPE nos indica que el nivel de sinificancia en el riesgo de muerte no es relevante.

Por otra parte, tenemos otras variables que si contribuyen al riesgo de muerte, como son la AGE, el ASPC, BMPC, MRI, HGB.

Por último, los variables con mayor signifinacia son B2M, CREAT, LDH, ALB y Cyto_Abn.

Aunque la edad aparece con una signifancia "media", hay que tener en cuenta que la mayoria de los individuos, el 75% de ellos, tienen más de 50 años. Por lo que, en la base de datos, no tenemos suficientes individuos para representar a la población joven.

Realicemos un estudio para determinar cual de las 13 variables consideradas son significativas para construir el modelo.

Realizamos ahora, con las variables significativas, un modelo multivariante

```{r}
# Ajustar el modelo de Cox
mod1 <- coxph(Surv(OS_Time, OS_Censor) ~ B2M + CREAT + LDH + ALB + Cyto_Abn + AGE + ASPC + BMPC + MRI + HGB, data = Arkansas)

# Resumir el modelo
mod1_summary <- summary(mod1)

# Crear un dataframe con los coeficientes y otras estadísticas de interés
tabla_cox <- data.frame(
  coef = round(mod1_summary$coefficients[, "coef"], 5),
  exp_coef = round(mod1_summary$coefficients[, "exp(coef)"], 5),
  se_coef = round(mod1_summary$coefficients[, "se(coef)"], 5),
  z = round(mod1_summary$coefficients[, "z"], 3),
  p_value = mod1_summary$coefficients[, "Pr(>|z|)"]
)

# Cambiar los nombres de las columnas para que sean más comprensibles
colnames(tabla_cox) <- c("Coeficiente Beta", "Exp(Coef)", "Error Estándar", "Z-valor", "P-valor")

# Mostrar la tabla generada
print(tabla_cox)


# Crear la tabla y guardarla en un archivo PDF
kable(tabla_cox, format = "latex", booktabs = TRUE, caption = "Resultados del modelo de Cox") %>%
  kable_styling(latex_options = c("hold_position")) %>%
  save_kable("/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/tabla_cox_multivariante.tex")

```

Observamos que cuando combinamos las variables más significativas, algunas de obtienen un valor muy elevado, destaca el caso de la CREAT, que obtiene un p-valor muy próximo a 1.

Esto, es debido a la **multicolinealidad**, es dicir, a que hay variables que tienen un alto grado de correlación con otras y el modelo no es capaz de identificar cual de las dos variables es la que es significativa en el modelo.

Para la selección de las variables y evitar la multicolinealidad, usaremos el método de **selección hacia atrás**

```{r}


# Ajustar el modelo inicial con todas las variables
modelo_inicial <- coxph(Surv(OS_Time, OS_Censor) ~ AGE + SEX + PROT + B2M + ISOTYPEFLC + ISOTYPEIgA + ISOTYPEIgD + ISOTYPEIgG + CRP + CREAT + LDH + ALB + HGB + ASPC + BMPC + MRI + Cyto_Abn, data = Arkansas_SinDatosFaltantes)

# Aplicar selección hacia atrás
modelo_backward <- step(modelo_inicial, direction = "backward")

# Resumir el modelo final ajustado
modelo_backward_summary <- summary(modelo_backward)
print(modelo_backward_summary)
# Crear un dataframe con los coeficientes y estadísticas del modelo ajustado
tabla_backward <- data.frame(
  coef = formatC(modelo_backward_summary$coefficients[, "coef"], 5),
  exp_coef = formatC(modelo_backward_summary$coefficients[, "exp(coef)"], format = "g", digits = 5),
  se_coef = formatC(modelo_backward_summary$coefficients[, "se(coef)"], format = "g", digits = 5),
  z = formatC(modelo_backward_summary$coefficients[, "z"], format = "g", digits = 5),
  p_value = formatC(modelo_backward_summary$coefficients[, "Pr(>|z|)"], format = "g", digits = 2  )
)

# Renombrar las columnas para mayor claridad
colnames(tabla_backward) <- c("Coeficiente", "Exp(Coef)", "Error Estándar", "Z-valor", "P-valor")

# Mostrar la tabla generada
print(tabla_backward)

# Convertir la tabla a formato LaTeX
tabla_latex <- xtable(tabla_backward, caption = "Resultados del modelo final después de selección hacia atrás")

# Guardar la tabla en un archivo .tex para Overleaf
print(tabla_latex, file = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/tabla_cox_backward.tex", include.rownames = TRUE)
```

ANÁLISIS DEL MÓDELO "FINAL"

age: El coeficiente es positivo (0.016140), lo que sugiere que un aumento en la edad incrementa ligeramente el riesgo, pero el valor p (0.063447) indica que el efecto es marginalmente significativo (cercano a 0.05, pero no lo suficiente). B2M: Tiene un coeficiente positivo (0.045930), lo que indica que el aumento en B2M incrementa el riesgo de manera significativa (p = 2.81e-06). Su HR es 1.047, lo que significa que por cada unidad adicional en B2M, el riesgo aumenta en un 4.7%. LDH: También tiene un coeficiente positivo y es altamente significativo (p = 0.000197). Un aumento en LDH incrementa el riesgo, aunque en menor magnitud, un 0.04% (HR = 1.004). ALB: El coeficiente es negativo (-0.438302), lo que significa que un aumento en la albúmina disminuye el riesgo. Es un efecto significativo (p = 0.000637) y el HR de 0.645131 indica una reducción del 35.49% en el riesgo por cada unidad adicional de albúmina. MRI: Tiene un coeficiente positivo y significativo (p = 0.013479), indicando que un aumento en los valores de MRI incrementa el riesgo (HR = 1.011635). Cyto_Abn: Tiene un coeficiente positivo (0.604041), lo que indica que la presencia de anomalías citogenéticas aumenta significativamente el riesgo (p = 0.000283), con un HR de 1.829496, es decir, el riesgo se incrementa en un 82.95%.

GRÁFICO QUE MUESTRA COMO SE VAN ELIMINANDO LAS VARIABLES

```{r}
# Crear manualmente el data frame con las variables y las iteraciones
variables <- c("PROT","Age", "Sex", "B2M", "CRP", "CREAT", "LDH", "ALB", "HGB", "ASPC", "BMPC", "MRI", "Cyto_Abn")

# Asignar en qué iteración fue eliminada cada variable (0 si no fue eliminada)
eliminadas_iteracion <- c(5,0, 4, 0, 3, 2, 1, 0, 8, 6, 7, 0, 0)

# Crear el data frame con las variables y las iteraciones de eliminación
df <- data.frame(Variable = variables, Iteracion_Eliminada = eliminadas_iteracion)

# Máximo número de iteraciones (ajusta según tu caso)
max_iter <- 8

# Crear un nuevo data frame para indicar presencia (1) o eliminación (0)
iteraciones_df <- data.frame(Variable = rep(variables, each = max_iter),
                             Iteracion = rep(1:max_iter, times = length(variables)),
                             Status = 1)

# Modificar el status a 0 cuando la variable fue eliminada
for (i in 1:nrow(df)) {
  if (df$Iteracion_Eliminada[i] > 0) {
    iteraciones_df$Status[iteraciones_df$Variable == df$Variableble[i] & 
                          iteraciones_df$Iteracion >= df$Iteracion_Eliminada[i]] <- 0
  }
}

# Filtrar sólo las filas donde la variable aún está presente (Status == 1)
iteraciones_df <- iteraciones_df[iteraciones_df$Status == 1, ]

# Crear el gráfico con líneas horizontales para cada variable
ggplot(iteraciones_df, aes(x = Iteracion, y = Variable)) +
  geom_line(aes(group = Variable), size = 1.5) +  # Colorear cada variable de forma distinta
  labs(title = "Proceso de eliminación de variables manual",
       x = "Iteraciones", 
       y = "Variables") +
  scale_x_continuous(breaks = seq(0, max_iter, by = 1)) + 
  theme_minimal() +
  theme(legend.position = "none")  # Eliminar leyenda si no es necesaria


```

Gráfico del modelo de Cox

```{r}
  curva_supervivencia <- survfit(modelo_backward)
  
  # Graficar las curvas
  ggsurvplot(curva_supervivencia, data = Arkansas, 
             conf.int = TRUE,          # Añadir intervalo de confianza
             pval = TRUE,              # Mostrar valor p
             risk.table = TRUE,        # Mostrar tabla de riesgos
             ggtheme = theme_minimal(),# Tema estético
             palette = c("#E69F00", "#56B4E9"))  # Colores personalizables
```

```{r}
# Crear el objeto gráfico
curva_supervivencia <- survfit(modelo_backward)

# Crear el gráfico
plot_supervivencia <- ggsurvplot(curva_supervivencia, 
                                 data = Arkansas, 
                                 conf.int = TRUE,          # Añadir intervalo de confianza
                                 risk.table = FALSE,        # Mostrar tabla de riesgos
                                 ggtheme = theme_minimal(),# Tema estético
                                 palette = c("#E69F00", "#56B4E9"), # Colores personalizables
                                 legend = "none",
                                 title = "MODELO DE COX \"BACKWARD\" ",
                                  xlab = "Tiempo (en meses)",
                                 ylab = "Probabilidad de superviviencia"
                                 )  

# Guardar el gráfico como PDF
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/grafico_modeloCoxBackward_VarCompletas.pdf", 
       plot = plot_supervivencia$plot,  # Extraer solo el gráfico principal
       width = 10, height = 7, device = "pdf")  # Ajusta el tamaño y formato

print(plot_supervivencia)
```

# Gráficos Kaplan-Meier

## Preparación de los datos

```{r}
# Cargar la librería dplyr
library(dplyr)

# Dataset transformado con nuevas columnas que indican si están en el rango (0) o fuera del rango (1)
datosEstratificados <- Arkansas %>%
  mutate(
    AGE_flag = ifelse(AGE <= 50, 0, 1),  
    B2M_flag = ifelse(B2M <= 2.7, 0, 1),  
    CREAT_flag = ifelse(SEX == "male" & CREAT >= 0.74 & CREAT <= 1.35, 0, 
                 ifelse(SEX == "female" & CREAT >= 0.54 & CREAT <= 1.04, 0, 1)),
    LDH_flag = ifelse(LDH >= 122 & LDH <= 222, 0, 1),  
    ALB_flag = ifelse(ALB >= 3.5 & ALB <= 5, 0, 1),     
    # Para MRI no hay niveles normales, lo dividimos por quantiles
    MRI_flag = ifelse(MRI <= quantile(na.omit(Arkansas$MRI), 0.25),0,
                      ifelse(MRI >= quantile(na.omit(Arkansas$MRI), 0.25) & MRI <= quantile(na.omit(Arkansas$MRI), 0.75),1,2))
  )

# Mostrar las primeras filas del nuevo dataset
head(datosEstratificados, 30)
  
```

```{r}
  
nrow(datosEstratificados[datosEstratificados$CREAT_flag == 0 & datosEstratificados$B2M_flag == 0,])
# Ajustar el modelo de supervivencia

# Crear el gráfico de supervivencia

ggsurvplot(
  survfit(Surv(OS_Time, OS_Censor) ~ AGE_flag, data = Arkansas), 
  data = datosEstratificados, 
  pval = TRUE,
  palette = c("#0072B2", "#D95F02", "#F0E442", "#999999")  # Define la paleta de colores
)

ggsurvplot(
  survfit(Surv(OS_Time, OS_Censor) ~ B2M_flag, data = Arkansas), 
  data = datosEstratificados, 
  pval = TRUE,
  palette = c("#0072B2", "#D95F02", "#F0E442", "#999999")  # Define la paleta de colores
)

ggsurvplot(
  survfit(Surv(OS_Time, OS_Censor) ~ ALB_flag, data = Arkansas), 
  data = datosEstratificados, 
  pval = TRUE,
  palette = c("#0072B2", "#D95F02", "#F0E442", "#999999")  # Define la paleta de colores
)

ggsurvplot(
  survfit(Surv(OS_Time, OS_Censor) ~ LDH_flag, data = Arkansas), 
  data = datosEstratificados, 
  pval = TRUE,
  palette = c("#0072B2", "#D95F02", "#F0E442", "#999999")  # Define la paleta de colores
)

ggsurvplot(
  survfit(Surv(OS_Time, OS_Censor) ~ MRI_flag, data = datosEstratificados), 
  data = datosEstratificados, 
  pval = TRUE,
  palette = c("#0072B2", "#D95F02", "#F0E442", "#999999")  # Define la paleta de colores
)

```

```{r}
# Cargar el paquete survival
library(survival)

# Ajustar modelos paramétricos con distintas distribuciones
modelo_exp <- survreg(Surv(OS_Time, OS_Censor) ~ AGE + SEX + PROT + B2M + ISOTYPEFLC + 
                      ISOTYPEIgA + ISOTYPEIgD + ISOTYPEIgG + CRP + CREAT + LDH + ALB + 
                      HGB + ASPC + BMPC + MRI + Cyto_Abn, data = Arkansas_SinDatosFaltantes, dist = "exponential")
modelo_exp_backward <- step(modelo_exp, direction = "backward")

modelo_weibull <- survreg(Surv(OS_Time, OS_Censor) ~ AGE + SEX + PROT + B2M + ISOTYPEFLC + 
                          ISOTYPEIgA + ISOTYPEIgD + ISOTYPEIgG + CRP + CREAT + LDH + ALB + 
                          HGB + ASPC + BMPC + MRI + Cyto_Abn, data = Arkansas_SinDatosFaltantes, dist = "weibull")
modelo_weibull_backward <- step(modelo_weibull, direction = "backward")


```

## Residuos Cox-Snell

```{r}

# Calcular los residuos de Cox-Snell para los tres modelos
residuos_cox_snell_modelo_no_parametrico <- modelo_backward$linear.predictors
residuos_cox_snell_modelo_exp <- modelo_exp_backward$linear.predictors
residuos_cox_snell_modelo_weibull <- modelo_weibull_backward$linear.predictors

# Crear un nuevo conjunto de datos que contenga los residuos de Cox-Snell y la información de censura para cada modelo
datos_cox_snell_no_parametrico <- data.frame(
  residuos_cox_snell = residuos_cox_snell_modelo_no_parametrico,
  OS_Censor = Arkansas_SinDatosFaltantes$OS_Censor
)

datos_cox_snell_exp <- data.frame(
  residuos_cox_snell = residuos_cox_snell_modelo_exp,
  OS_Censor = Arkansas_SinDatosFaltantes$OS_Censor
)

datos_cox_snell_weibull <- data.frame(
  residuos_cox_snell = residuos_cox_snell_modelo_weibull,
  OS_Censor = Arkansas_SinDatosFaltantes$OS_Censor
)

# Ajustar modelos de Kaplan-Meier a los residuos de Cox-Snell
modelo_kaplan_meier_no_parametrico <- survfit(Surv(residuos_cox_snell, OS_Censor) ~ 1, data = datos_cox_snell_no_parametrico)
modelo_kaplan_meier_exp <- survfit(Surv(residuos_cox_snell, OS_Censor) ~ 1, data = datos_cox_snell_exp)
modelo_kaplan_meier_weibull <- survfit(Surv(residuos_cox_snell, OS_Censor) ~ 1, data = datos_cox_snell_weibull)

# Graficar la función de supervivencia acumulada para cada modelo
grafico_no_parametrico <- ggplot() +
  geom_step(aes(x = modelo_kaplan_meier_no_parametrico$time, y = modelo_kaplan_meier_no_parametrico$surv), color = "blue") +
  geom_abline(intercept = 1, slope = -1, linetype = "dashed", color = "red") +
  labs(
    title = "Residuos de Cox-Snell",
    subtitle = "Modelo Semi-parametrico",
    x = "Residuos de Cox-Snell",
    y = "Función de Supervivencia Acumulada"
  ) +
  theme_minimal()

grafico_exp <- ggplot() +
  geom_step(aes(x = modelo_kaplan_meier_exp$time, y = modelo_kaplan_meier_exp$surv), color = "blue") +
  geom_abline(intercept = 1, slope = -1, linetype = "dashed", color = "red") +
  labs(
    title = "Residuos de Cox-Snell",
    subtitle = "Modelo Exponencial",
    x = "Residuos de Cox-Snell",
    y = "Función de Supervivencia Acumulada"
  ) +
  theme_minimal()

grafico_weibull <- ggplot() +
  geom_step(aes(x = modelo_kaplan_meier_weibull$time, y = modelo_kaplan_meier_weibull$surv), color = "blue") +
  geom_abline(intercept = 1, slope = -1, linetype = "dashed", color = "red") +
  labs(
    title = "Residuos de Cox-Snell", 
    subtitle = "Modelo Weibull",
    x = "Residuos de Cox-Snell",
    y = "Función de Supervivencia Acumulada"
  ) +
  theme_minimal()

# Colocar los tres gráficos uno al lado del otro
grid.arrange(grafico_no_parametrico, grafico_exp, grafico_weibull, ncol = 3)

# Gráfico Q-Q para residuos de deviance
qqplot(qexp(ppoints(nrow(Arkansas_SinDatosFaltantes)),1),residuos_cox_snell_modelo_no_parametrico)
qqline(residuos_cox_snell_modelo_no_parametrico, col = "red")

```

## Residuos de Martingale

```{r}
residuos_martingale <- residuals(modelo_backward, type = "martingale")
hist(residuos_martingale, 
     main = "Distribución de los Residuos de Martingale", 
     xlab = "Residuos de Martingale", 
     col = "#1f78b4", 
     border = "white")

variables_backward = c("AGE", "B2M", "LDH","ALB", "MRI")
for (variable in variables_backward) {
  plot <- ggplot(data = Arkansas_SinDatosFaltantes, aes_string(x = variable, y = "residuos_martingale")) +
    geom_point(color = "#1f78b4", alpha = 0.6) +
    geom_smooth(method = "loess", color = "red") +
    labs(title = paste("Residuos de Martingale vs", variable),
         x = variable,
         y = "Residuos de Martingale") +
    theme_minimal()
  
  # Mostrar el gráfico
  print(plot)
}
```

Histograma --\> Para detectar posibles anomalias. Ya que los residuos de martingale van de -infinito a 1.

Gráficos --\> La curva roja es un suavizado que representa la tendencia de los residuos frente a los valores de la variable. La banda gris es el intervalo de confianza. Si la curva se desvía significativamente de la línea horizontal (en 0), puede indicar que la relación entre B2M y el riesgo no es lineal, lo cual podría violar los supuestos del modelo de Cox.

La curva roja parece desviarse de la línea horizontal en valores altos de B2M, lo que sugiere que la relación entre B2M y el riesgo podría no ser lineal. Lo mismo para MRI.

R nos devuelve una alerta indicando: Valores muy alejados del resto de los datos (outliers) pueden causar problemas en el cálculo, por lo que la desviación de la recta 0 puede deberse a esto.

## Deviance

```{r,warning=FALSE}
# Calcular los residuos de deviance
residuos_deviance_modelo_no_parametrico <- residuals(modelo_backward, type = "deviance")
residuos_deviance_modelo_exp <- residuals(modelo_exp_backward, type = "deviance")
residuos_deviance_modelo_weibull <- residuals(modelo_weibull_backward, type = "deviance")


ggplot(data = Arkansas_SinDatosFaltantes, aes(x = residuos_deviance_modelo_no_parametrico)) +
  geom_histogram(binwidth = 0.5, fill = "skyblue", color = "black") +
  labs(
    title = "Histograma de Residuos de Deviance",
    x = "Residuos de Deviance",
    y = "Frecuencia"
  ) +
  theme_minimal()

# Boxplot de los residuos de deviance
ggplot(data = Arkansas_SinDatosFaltantes, aes(y = residuos_deviance_modelo_no_parametrico)) +
  geom_boxplot(fill = "lightblue") +
  labs(
    title = "Boxplot de Residuos de Deviance",
    y = "Residuos de Deviance"
  ) +
  theme_minimal()

# Gráfico Q-Q para residuos de deviance
qqnorm(residuos_deviance_modelo_no_parametrico)
qqline(residuos_deviance_modelo_no_parametrico, col = "red")

variables_backward = c("AGE", "B2M", "LDH","ALB", "MRI", "Cyto_Abn")
for (variable in variables_backward) {
plot_modelo_no_parametrico <- ggplot(data = Arkansas_SinDatosFaltantes, aes_string(x = variable, y = "residuos_deviance_modelo_no_parametrico")) +
  geom_point() +
  geom_smooth(method = "loess", color = "red", se = TRUE) +
  labs(
    title = paste("Deviance vs ",variable),
    subtitle = "Modelo No parametrico",
    x = variable,
    y = "Residuos de Deviance"
  ) +
  theme_minimal()

plot_modelo_exp <- ggplot(data = Arkansas_SinDatosFaltantes, aes_string(x = variable, y = "residuos_deviance_modelo_exp")) +
  geom_point() +
  geom_smooth(method = "loess", color = "red", se = TRUE) +
  labs(
    title = paste("Deviance vs ",variable),
    subtitle = "Modelo Exponencial",
    x = variable,
    y = "Residuos de Deviance"
  ) +
  theme_minimal()

plot_modelo_weibull<- ggplot(data = Arkansas_SinDatosFaltantes, aes_string(x = variable, y = "residuos_deviance_modelo_weibull")) +
  geom_point() +
  geom_smooth(method = "loess", color = "red", se = TRUE) +
  labs(
    title = paste("Deviance vs ",variable),
    subtitle = "Modelo Weibull",
    x = variable,
    y = "Residuos de Deviance"
  ) +
  theme_minimal()

grid.arrange(plot_modelo_no_parametrico, plot_modelo_exp, plot_modelo_weibull, ncol = 3)
}
# Gráfico Q-Q para residuos de deviance
qqnorm(residuos_deviance_modelo_no_parametrico)
qqline(residuos_deviance_modelo_no_parametrico, col = "red")
```

## Residuos Schoenfeld

```{r}
residuos_schoenfeld_no_parametrico <- cox.zph(modelo_backward)
residuos_schoenfeld_no_parametrico
```

Todos los valores p son mayores que 0.05, lo que indica que no hay evidencia suficiente para rechazar el supuesto de riesgos proporcionales para ninguna de las covariables.

## AIC

```{r}
# Calcular el AIC para cada modelo
aic_modelo_no_parametrico <- AIC(modelo_backward)
aic_modelo_exp <- AIC(modelo_exp_backward)
aic_modelo_weibull <- AIC(modelo_weibull_backward)

# Crear un data frame con los resultados de AIC
aic_resultados <- tibble(
  nombres_modelos = c("Modelo No Paramétrico", "Modelo Exponencial", "Modelo Weibull"),
  valor_aic = c(aic_modelo_no_parametrico, aic_modelo_exp, aic_modelo_weibull)
)

# Crear la tabla visual con `gt()`
tabla_aic <- aic_resultados %>%
  gt() %>%
  tab_header(
    title = "Comparación de AIC entre Modelos"
  ) %>%
  fmt_number(
    columns = "valor_aic",
    decimals = 2
  ) %>%
  cols_label(
    nombres_modelos = "Modelo",
    valor_aic = "Valor AIC"
  ) %>%
  tab_options(
    table.font.size = px(12),
    heading.title.font.size = px(18)
  )

# Mostrar la tabla
tabla_aic
```

# Concordancia

```{r}
library(survival)

# Crear el objeto de supervivencia
surv_obj <- Surv(Arkansas_SinDatosFaltantes$OS_Time, Arkansas_SinDatosFaltantes$OS_Censor)

# Calcular el C-Index para el modelo de Cox
concordance_cox <- concordance(modelo_backward, newdata = Arkansas_SinDatosFaltantes)
c_index_cox <- concordance_cox$concordance

# Calcular el C-Index para el modelo Exponencial
concordance_exp <- concordance(modelo_exp_backward, newdata = Arkansas_SinDatosFaltantes)
c_index_exp <- concordance_exp$concordance

# Calcular el C-Index para el modelo Weibull
concordance_weibull <- concordance(modelo_weibull_backward, newdata = Arkansas_SinDatosFaltantes)
c_index_weibull <- concordance_weibull$concordance

c_index_resultados <- tibble(
  nombres_modelos = c("Modelo Cox", "Modelo Exponencial", "Modelo Weibull"),
  valor_c_index = c(c_index_cox, c_index_exp, c_index_weibull)
)

# Crear la tabla visual con `gt()`
tabla_c_index <- c_index_resultados %>%
  gt() %>%
  tab_header(
    title = "Comparación del C-Index entre Modelos"
  ) %>%
  fmt_number(
    columns = "valor_c_index",
    decimals = 3
  ) %>%
  cols_label(
    nombres_modelos = "Modelo",
    valor_c_index = "Valor C-Index"
  ) %>%
  tab_options(
    table.font.size = px(15),
    heading.title.font.size = px(18)
  )

# Mostrar la tabla
tabla_c_index

```


```{r}
# Cargar las librerías
library(timeROC)
library(survival)
library(RColorBrewer)
pred_backward <- predict(modelo_backward, type = "lp")
pred_exp <-  -predict(modelo_exp_backward, type = "lp")
pred_weibull <- -predict(modelo_weibull_backward, type = "lp")

#tiempos = c(5,10,20,30,40,50,60,70,80,90,100)
tiempos = c(5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100)
# Crear el objeto timeROC para el modelo backward
roc_backward <- timeROC(
  T = Arkansas_SinDatosFaltantes$OS_Time, 
  delta = Arkansas_SinDatosFaltantes$OS_Censor, 
  marker = pred_backward, 
  cause = 1, 
  weighting = "marginal", 
  times = tiempos
)
# Crear el objeto timeROC para el modelo backward
roc_exp <- timeROC(
  T = Arkansas_SinDatosFaltantes$OS_Time, 
  delta = Arkansas_SinDatosFaltantes$OS_Censor, 
  marker = pred_exp, 
  cause = 1, 
  weighting = "marginal", 
  times = tiempos
)
# Crear el objeto timeROC para el modelo backward
roc_weibull<- timeROC(
  T = Arkansas_SinDatosFaltantes$OS_Time, 
  delta = Arkansas_SinDatosFaltantes$OS_Censor, 
  marker = pred_weibull, 
  cause = 1, 
  weighting = "marginal", 
  times = tiempos
)

```

```{r}
# Extraer las AUC de los objetos timeROC
roc_backward_auc <- roc_backward$AUC  # AUC para cada tiempo del modelo backward
roc_exp_auc <- roc_exp$AUC            # AUC para el modelo exponencial
roc_weibull_auc <- roc_weibull$AUC    # AUC para el modelo Weibull

# Crear el marco de datos con las AUC
data <- data.frame(
  x = rep(roc_backward$times, 3),  # Los tiempos son iguales para todas las curvas
  y = c(roc_backward_auc, roc_exp_auc, roc_weibull_auc),  # Combina las AUC de las curvas
  curva = rep(c("Modelo Backward", "Modelo Exponencial", "Modelo Weibull"), 
              each = length(roc_backward$times))  # Identificar cada curva
)

# Cargar la librería ggplot2
if (!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)

grafico_comparacion_auc <- ggplot(data, aes(x = x, y = y, color = curva)) +
  geom_line(size = 1.2) +      
  geom_point(size = 3) +
  labs(title = "Comparación de AUC entre Modelos", 
       x = "Tiempo", 
       y = "AUC", 
       color = "Modelos") +     
  scale_color_manual(values = c("Modelo Backward" = "#1f77b4", 
                                "Modelo Exponencial" = "#ff7f0e", 
                                "Modelo Weibull" = "#2ca02c")) + # Colores personalizados
  theme_minimal()

grafico_comparacion_auc
grafico_comparacion_auc + ylim(0,1)

```

```{r}

grafico_OS_Time = Arkansas %>%
  ggplot(aes(x = OS_Time)) +
  geom_histogram(fill = "#1f78b4", color = "black", alpha = 0.9, bins = 20) +

  # Títulos
  ggtitle("Distribución de OS_Time",subtitle = "") +
  labs(x = "Tiempo (meses)", y = "Frecuencia") +
  scale_x_continuous(breaks = pretty_breaks(n = 10)) + 
  theme_classic() +
    theme(
  plot.title = element_text(size = 20, face = "bold", hjust = 0.5), # Título principal
  axis.text.x = element_text(size = 14),  # Tamaño del texto del eje X
  axis.text.y = element_text(size = 14),  # Tamaño del texto del eje Y
  axis.title.x = element_text(size = 18), # Tamaño del título del eje X
  axis.title.y = element_text(size = 18)  # Tamaño del título del eje Y
)
   # Añadir el recuadro con la proporción

grid.arrange(grafico_comparacion_auc, grafico_OS_Time)

```



PARA EL MODELO FINAL
```{r}
# Instalar las librerías necesarias si no están instaladas
if (!require("timeROC")) install.packages("timeROC", dependencies = TRUE)
if (!require("survival")) install.packages("survival", dependencies = TRUE)
if (!require("RColorBrewer")) install.packages("RColorBrewer", dependencies = TRUE)



# Supongamos que tu conjunto de datos se llama 'Arkansas_SinDatosFaltantes'
# y tiene las siguientes columnas:
# OS_Time: Tiempo de seguimiento para análisis de supervivencia
# OS_Censor: Variable de censura (1 = evento, 0 = censurado)

# Ajustar el modelo de Cox

# Generar predicciones del riesgo lineal (linear predictor) para el modelo
pred_backward <- predict(modelo_backward, type = "lp")

# Crear el objeto timeROC para el modelo backward
roc_backward <- timeROC(
  T = Arkansas_SinDatosFaltantes$OS_Time, 
  delta = Arkansas_SinDatosFaltantes$OS_Censor, 
  marker = pred_backward, 
  cause = 1, 
  weighting = "marginal", 
  times = seq(5, 100, by = 15) # Cambia los tiempos según tu análisis
)

# Crear una escala de colores para los tiempos (azul claro a azul oscuro)
color_scale <- colorRampPalette(brewer.pal(9, "Blues"))(length(roc_backward$times))

# Graficar la curva ROC para el modelo backward
plot(roc_backward, 
     time = roc_backward$times[1], # Primer tiempo
     col = color_scale[1], 
     lwd = 2, 
     title = "Curvas ROC en diferentes tiempos (Modelo Backward)")

# Superponer las demás curvas ROC al gráfico
for (i in 2:length(roc_backward$times)) {
  plot(roc_backward, 
       time = roc_backward$times[i], 
       col = color_scale[i], 
       lwd = 2, 
       add = TRUE) # Superponer las curvas
}

# Añadir una leyenda para identificar los tiempos
legend("bottomright", 
       legend = paste("Tiempo =", roc_backward$times), 
       col = color_scale, 
       lwd = 2, 
       cex = 0.8, # Ajustar tamaño de texto si es necesario
       title = "Leyenda de tiempos")



```

# OTROS

```{r}

grafico_B2M_puntos <- ggplot(Arkansas, aes(x = 1:564)) +
  geom_point(aes(y = B2M), color = "#56B4E9", size = 2, alpha = 0.9) +
  annotate("rect", xmin = -2, xmax = 570, ymin = 0, ymax = 2.7, alpha = 0.35,, fill = "lightgreen") +  # Cambiado el color del rectángulo
  geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = 0, ymax = 0, fill = "Niveles Normales"), ) +
  scale_fill_manual(name = " ", values = "lightgreen" )+
  labs(title = "Diagrama de puntos de B2M",
       subtitle = "*Algunos valores no han sido representados \n por ser demasiado elevados",
       x = NULL,  # Eliminar etiqueta del eje x
       y = "B2M") +
  ylim(-1, 15) +  # Ajuste del eje Y
geom_text(aes(x = numero_observaciones/2 , y = -1, 
              label = paste("Sanos: ", proporcionB2M_sano ,"\n","Mal: ", proporcionB2M_mal)),
          size = 4, color = "black")+
  theme_minimal() +
  theme(
    axis.title.x = element_blank(),  # Eliminar título del eje x
    axis.text.x = element_blank()     # Eliminar texto del eje x
  )
grafico_B2M_puntos
```

```{r}
library(GGally)
 d_b<- Arkansas %>%
  dplyr::select(SEX,B2M,CRP,CREAT, LDH, ALB,HGB)
d_b %>% ggpairs(aes(color = SEX ,alpha = 0.7),
        upper = list(continuous = wrap("cor", size = 2.5)))
names(Arkansas)
```

```{r}

grafico_AGE = Arkansas %>%
  ggplot(aes(x = AGE)) +
  geom_histogram(aes(y = ..count..), fill = "#1f78b4", color = "black", alpha = 0.9) +
  
  # Añadir los valores encima de cada barra
  geom_text(stat = "bin", aes(label = ..count.., y = ..count.. + 1.5), size = 4, position = position_identity()) +

  # Títulos
  ggtitle("Distribución de AGE") +
  labs(x = "Edad (en años)", y = "Frecuencia") +
  scale_x_continuous(breaks = pretty_breaks(n = 10)) + 
  theme_classic() 
    # Gira el gráfico a horizontal

grafico_AGE
```

```{r}
ggplot(Arkansas, aes(x = AGE)) +
  geom_histogram(binwidth = 5, fill = "#56B4E9", color = "black") +
  labs(title = "Distribución de la Edad", x = "Edad (en meses)", y = "Frecuencia") +
  theme_minimal()+
  geom_segment(aes(x = quantile(Arkansas$AGE, 0.25), y = -1, yend = 115 , xend = quantile(Arkansas$AGE, 0.25)), linetype = 2, linewidth = 0.8) +
  annotate(geom = "text", x = quantile(Arkansas$AGE, 0.25), y = 120, label = "Q1") 
```



