```         
---
```

title: "Nuevo modelo" format: html editor: visual

Rendering: embed-resources: true ---

# Librerias

```{r}
library(tidyverse)
library(readxl)
library(survival)
library(survminer)
library(xtable)
library(kableExtra)
library(gt) # Para una mejor visulización de las tablas
library(gridExtra) # Para poner gráficos uno al lado del otro
library(ggcorrplot) # Para la creación del gráfico de correlación
library(dplyr)
library(patchwork)
library(scales)
library(viridis)
library(timeROC)
library(RColorBrewer)
library(grid)
library(survAUC) # Para calcular el GH-Index
```

# Datos

```{r, echo = FALSE, warning=FALSE}
# Carga de datos 
Arkansas <- read_excel("~/Downloads/TFG/R/TFGMarcArrom/Input/Arkansas.xlsx", 
                       col_types = c("numeric", "numeric", "text", 
                                     "numeric", "text", "text", "text", 
                                     "numeric", "numeric", "numeric", 
                                     "numeric", "numeric", "numeric", 
                                     "numeric", "numeric", "numeric", 
                                     "numeric", "numeric", "numeric", 
                                     "numeric", "numeric", "numeric", 
                                     "numeric"))

# Reorganización de las variables
Arkansas <- Arkansas[, c("original order", "PATID", "PROT", "SEX", "RACE", "ISOTYPE", "AGE", "B2M", "CRP", "CREAT", "LDH", "ALB", "HGB", "ASPC", "BMPC", "MRI", "Cyto_Abn", "CPS1", "CPR1", "EFS_Censor", "EFS_Time", "OS_Censor", "OS_Time")]

# Crear una copia del dataset para no modificar el original
Arkansas_copy <- Arkansas
dim(Arkansas)
```

# Análisis exploratorio de los datos

La base de datos *Arkansas* está formada por 564 observaciones de las cuales se tomaron 23 variables, de las cuales usaremos 16 para nuestro estudio.

```{r, echo = FALSE, warning=FALSE}
visualizacion_variables = data.frame(
  nombres_variables = colnames(Arkansas),
  variable_usada = c("No","No","Si","Si","No","Si","Si","Si","Si","Si","Si","Si","Si","Si","Si","Si","Si","No","No","No","No","Si","Si"),
  explicacion = c("Orden de los datos",
                  "Identificación Paciente",
                  "Tratamiento Recibido (\"TT2\" o \"TT3\")",
                  "Sexo del paciente (\"male\" o \"female\")",
                  "Raza del paciente (\"white\" o \"other\")",
                  "Isotipo del paciente (\"IgA\" , \"IgG\", \"IgM\" o \"IgE\")",
                  "Edad del paciente (en meses)",
                  "Niveles de Microglobulina beta-2 (en mg/l)",
                  "Niveles de Proteína C-Reactiva (en mg/l)",
                  "Niveles de Creatinina (en mg/dl)",
                  "Niveles de Lactato Deshidrogenasa (en U/l)",
                  "Niveles de Albúmina (en g/l)",
                  "Niveles de Hemoglobina (en g/dl)",
                  "Células plasmáticas en aspirado de médula ósea",
                  "Células plasmáticas en biopsia de médula ósea",
                  "Número de lesiones focales",
                  "Indica si presenta mutaciones citogenéticas (0 = No , 1 = Sí)",
                  "Variable sin contexto",
                  "Variable sin contexto",
                  "Indica si el paciente ha recaido (0 = No | 1 = Sí)",
                  "Tiempo sin recaer (en meses)",
                  "Indica si el paciente falleció (0 = No | 1 = Sí)",
                  "Tiempo de supervivencia (en meses)"
                  )
) %>% 
as_tibble
tabla_visualizacion_variables <- visualizacion_variables %>%
  gt() %>%
  tab_header(
    title = "Variables de estudio",
  ) %>%
  fmt_percent(
    columns = c("nombres_variables", "variable_usada", "explicacion"),
    decimals = 1
  ) %>%
  cols_label(
    nombres_variables = "Variable",
    variable_usada = "Analizada",
    explicacion = "Explicación"
  ) %>%
  tab_options(
    table.font.size = px(12),
    heading.title.font.size = px(18),
  )
tabla_visualizacion_variables
```

Algunos de los pacientes presentan censura, es decir, en su último control, este, no había fallecido. Además, algunas de las observaciones tienen datos faltantes, veamos cuales son estas variables y cuantos datos faltan para cada una y contabilicemos el nivel de censura que presentan los datos.

## Liempieza de la base de datos
```{r, echo = FALSE, warning=FALSE}
# Considerar los valores "nonsecretory" como faltantes en la columna ISOTYPE
Arkansas_copy$ISOTYPE[Arkansas$ISOTYPE == "Nonsecretory"] <- NA

# Calcular el número de datos faltantes por cada variable (columna)
faltantes_por_variable <- colSums(is.na(Arkansas_copy))

# Filtrar las variables con al menos un dato faltante
faltantes_por_variable <- faltantes_por_variable[faltantes_por_variable > 0]

# Crear una tabla resumen con los resultados
datos_faltantes <- data.frame(Variable = names(faltantes_por_variable), 
                              Faltantes = faltantes_por_variable) %>% as_tibble

# Eliminamos los NA's
Arkansas_SDF = na.omit(Arkansas_copy)

# Seleccionamos las variables que vamos a usar

Arkansas_SDF <- Arkansas_SDF %>% 
  select(PROT, SEX, ISOTYPE, AGE, B2M, CRP, CREAT, LDH, ALB, HGB, ASPC, BMPC, MRI, Cyto_Abn, OS_Censor, OS_Time)
Arkansas_SDF

# Asumimos que 'datos_faltantes' es un dataframe con columnas 'Variable' y 'Faltantes'
tabla_datos_faltantes <- datos_faltantes %>%
  arrange(desc(Faltantes)) %>%  # Ordenar por la columna de faltantes en orden descendente
  gt() %>%
  tab_header(
    title = "Datos faltantes por variable"
  )  %>%
  cols_label(
    Variable = "Variable",
    Faltantes = "Datos faltantes"
  ) %>%
  tab_options(
    table.font.size = px(12),
    heading.title.font.size = px(18)
  )
# Mostrar la tabla
tabla_datos_faltantes
```

También es interesante determinar si los niveles de las variables clínicas se encuentran en niveles sanos. Para eso, añadimos a nuestra base de datos estas variables. Los niveles sanos de las diferentes variables se han obtenido de MayoClinic y MedlinePlus.

```{r, echo = FALSE, warning=FALSE}
Arkansas_SDF <- Arkansas_SDF %>%
  mutate(
    AGE_flag = ifelse(AGE <= 50, 0, 1), # 0 = "Menor a 50 años", 1 = "Mayor a 50 años"
    B2M_flag = ifelse(B2M <= 2.7, 0, 1),  # 0 = "Nivel sano" , 1 = "Nivel NO sano"
    CREAT_flag = ifelse(SEX == "male" & CREAT >= 0.74 & CREAT <= 1.35, 0, 
                 ifelse(SEX == "female" & CREAT >= 0.54 & CREAT <= 1.04, 0, 1)), # 0 = "Nivel sano" , 1 = "Nivel NO sano"
    
    CRP_flag = ifelse(CRP <= 1, 0, # 0 = "Nivel sano" 
                ifelse(CRP > 1 & CRP <= 10, 1,2)), # 2 = "Inflamación moderada" , # 3 = "Inflamación marcada"
    
    LDH_flag = ifelse(LDH >= 122 & LDH <= 222, 0, 1),  # 0 = "Nivel sano" , 1 = "Nivel NO sano"
    ALB_flag = ifelse(ALB >= 3.5 & ALB <= 5, 0, 1), # 0 = "Nivel sano" , "1 = "Nivel NO sano"
    
    # Para MRI no hay niveles normales, lo dividimos por quantiles. 
    MRI_flag =  ifelse(MRI <= quantile(na.omit(Arkansas_SDF$MRI), 0.25),0,
                ifelse(MRI >= quantile(na.omit(Arkansas_SDF$MRI), 0.25) & MRI <= quantile(na.omit(Arkansas_SDF$MRI), 0.5),1,
                ifelse(MRI >= quantile(na.omit(Arkansas_SDF$MRI), 0.5) & MRI <= quantile(na.omit(Arkansas_SDF$MRI), 0.75),2,3))),
    
    HGB_flag = ifelse(SEX == "male" & HGB >= 13.8 & HGB <= 17.2, 0, 
                 ifelse(SEX == "female" & HGB >= 12.1 & HGB <= 15.1, 0, 1)) # 0 = "Nivel sano" , "1 = "Nivel NO sano"
  )
```

```{r}
# Definimos algunos valores
numero_observaciones = nrow(Arkansas_SDF)
numero_hombres = nrow(Arkansas_SDF[Arkansas_SDF$SEX == "male",])
numero_mujeres = nrow(Arkansas_SDF[Arkansas_SDF$SEX == "female",])

# Definimos la paleta de colores
custom_colors <- viridis(2, option = "viridis")  # Paleta de dos colores
colores = c("lightblue","lightgreen", "green")
colores_2 = "lightblue"
```

```{r B2M, echo = FALSE, warning=FALSE}
proporcionB2M_sano = round(nrow(Arkansas_SDF[Arkansas_SDF$B2M_flag == 0,]) / numero_observaciones,4)
proporcionB2M_mal = round(nrow(Arkansas_SDF[Arkansas_SDF$B2M_flag == 1, ]) / numero_observaciones,4)

grafico_B2M = Arkansas_SDF %>%
  ggplot(aes(x = B2M, fill = factor(Arkansas_SDF$B2M_flag, levels = c(1, 0)) )) +  # Asociar 'Estado' al argumento fill
  geom_histogram(color = "black", alpha = 1, binwidth = 3, size = 0.5) +
  
  # Personalización de la leyenda con proporciones
  scale_fill_manual(
    name = "Estado", 
    values = colores,
    labels = c(
      paste0("No saludable: ", proporcionB2M_mal * 100, "%"),
      paste0("Saludable: ", proporcionB2M_sano * 100, "%")
    )
  ) +
  
  # Títulos
  ggtitle("Distribución de B2M") +
  labs(x = "Nivel de B2M", y = "Frecuencia") +
  theme_classic() +
  theme(
    plot.title = element_text(size = 19, face = "bold", hjust = 0.5), # Título principal
    axis.text.x = element_text(size = 18),  # Tamaño del texto del eje X
    axis.text.y = element_text(size = 18),  # Tamaño del texto del eje Y
    axis.title.x = element_text(size = 17), # Tamaño del título del eje X
    axis.title.y = element_text(size = 17),  # Tamaño del título del eje Y
    legend.text = element_text(size = 17),  # Tamaño del texto de la leyenda
    legend.title = element_text(size = 14.5), # Tamaño y estilo del título de la leyenda
    legend.key.size = unit(0.8, "cm"),  # Tamaño de las claves de la leyenda
    legend.position = "top"  # Posición de la leyenda
  ) +
  scale_x_continuous(breaks = pretty_breaks(n = 20))
print(grafico_B2M)
```
```{r, echo = FALSE, warning=FALSE}
proporcionCREAT_sano_hombres = round(nrow(Arkansas_SDF[Arkansas_SDF$CREAT_flag == 0 & Arkansas_SDF$SEX == "male",]) / numero_hombres,4)
proporcionCREAT_mal_hombres = round(nrow(Arkansas_SDF[Arkansas_SDF$CREAT_flag == 1 & Arkansas_SDF$SEX == "male", ]) / numero_hombres, 4)

grafico_CREAT_MALE = Arkansas_SDF %>%
  filter(SEX == "male") %>%
  ggplot(aes(x = CREAT, fill = factor(CREAT_flag, levels = c(1, 0)))) +  # Asociar 'Estado_hombres' al argumento fill
  geom_histogram(color = "black", alpha = 1, binwidth = 0.5, size = 0.5) +
  
  # Personalización de la leyenda con proporciones
  scale_fill_manual(
    name = "Estado",
    values = colores,
    labels = c(
      paste0("No saludable: ", proporcionCREAT_mal_hombres * 100, "%"),
      paste0("Saludable: ", proporcionCREAT_sano_hombres * 100, "%")
    )
  ) +
  
  # Títulos
  ggtitle("Distribución de CREAT en hombres") +
  labs(x = "Nivel de Creatinina", y = "Frecuencia") +
  theme_classic() +
  theme(
    plot.title = element_text(size = 19, face = "bold", hjust = 0.5), # Título principal
    axis.text.x = element_text(size = 18),  # Tamaño del texto del eje X
    axis.text.y = element_text(size = 18),  # Tamaño del texto del eje Y
    axis.title.x = element_text(size = 17), # Tamaño del título del eje X
    axis.title.y = element_text(size = 17),  # Tamaño del título del eje Y
    legend.text = element_text(size = 17),  # Tamaño del texto de la leyenda
    legend.title = element_text(size = 14.5), # Tamaño y estilo del título de la leyenda
    legend.key.size = unit(0.8, "cm"),  # Tamaño de las claves de la leyenda
    legend.position = "top"  # Posición de la leyenda
  ) +
  scale_x_continuous(breaks = pretty_breaks(n = 10))
print(grafico_CREAT_MALE)
```
```{r, echo = FALSE, warning=FALSE}
proporcionCREAT_sano_mujeres = round(nrow(Arkansas_SDF[Arkansas_SDF$CREAT_flag == 0 & Arkansas_SDF$SEX == "female",]) / numero_mujeres,4)
proporcionCREAT_mal_mujeres = round(nrow(Arkansas_SDF[Arkansas_SDF$CREAT_flag == 1 & Arkansas_SDF$SEX == "female", ]) / numero_mujeres,4)

grafico_CREAT_FEMALE = Arkansas_SDF %>%
  filter(SEX == "female") %>%
  ggplot(aes(x = CREAT, fill = factor(CREAT_flag, , levels = c(1, 0)))) +  # Asociar 'Estado_mujeres' al argumento fill
  geom_histogram(color = "black", alpha = 1, binwidth = 0.5, size = 0.5) +
  
  # Personalización de la leyenda con proporciones
  scale_fill_manual(
    name = "Estado",
    values = colores,
    labels = c(
      paste0("No saludable: ", proporcionCREAT_mal_mujeres * 100, "%"),
      paste0("Saludable: ", proporcionCREAT_sano_mujeres * 100, "%")
    )
  ) +
  # Títulos
  ggtitle("Distribución de CREAT en mujeres") +
  labs(x = "Nivel de Creatinina", y = "Frecuencia") +
  theme_classic() +
  theme(
    plot.title = element_text(size = 19, face = "bold", hjust = 0.5), # Título principal
    axis.text.x = element_text(size = 18),  # Tamaño del texto del eje X
    axis.text.y = element_text(size = 18),  # Tamaño del texto del eje Y
    axis.title.x = element_text(size = 17), # Tamaño del título del eje X
    axis.title.y = element_text(size = 17),  # Tamaño del título del eje Y
    legend.text = element_text(size = 17),  # Tamaño del texto de la leyenda
    legend.title = element_text(size = 14.5), # Tamaño y estilo del título de la leyenda
    legend.key.size = unit(0.8, "cm"),  # Tamaño de las claves de la leyenda
    legend.position = "top"  # Posición de la leyenda
  ) +
  scale_x_continuous(breaks = pretty_breaks(n = 10))
print(grafico_CREAT_FEMALE)
```
```{r, echo = FALSE, warning=FALSE}
# Proporciones calculadas
proporcionCRP_sano = round(nrow(Arkansas_SDF[Arkansas_SDF$CRP_flag == 0,]) / numero_observaciones,4)
proporcionCRP_moderado = round(nrow(Arkansas_SDF[Arkansas_SDF$CRP_flag == 1, ]) / numero_observaciones,4)
proporcionCRP_alto = round(nrow(Arkansas_SDF[Arkansas_SDF$CRP_flag == 2, ]) / numero_observaciones,4)

# Gráfico de CRP
grafico_CRP <- Arkansas_SDF %>%
  ggplot(aes(x = CRP, fill = factor(CRP_flag, , levels = c(2, 1, 0)))) +
  geom_histogram(color = "black", alpha = 1, binwidth = 6, size = 0.5) +

  # Personalización de la leyenda
  scale_fill_manual(
    name = "Estado",
    values = colores,
    labels = c(
      paste0("Alto: ", proporcionCRP_alto * 100, "%"),
      paste0("Moderado: ", proporcionCRP_moderado * 100, "%"),
      paste0("Saludable: ", proporcionCRP_sano * 100, "%")
    )
  ) +
  # Títulos y etiquetas
  ggtitle("Distribución de PCR") +
  labs(x = "Nivel de PCR", y = "Frecuencia") +
  theme_classic() +
  theme(
    plot.title = element_text(size = 19, face = "bold", hjust = 0.5), # Título principal
    axis.text.x = element_text(size = 18),  # Tamaño del texto del eje X
    axis.text.y = element_text(size = 18),  # Tamaño del texto del eje Y
    axis.title.x = element_text(size = 17), # Tamaño del título del eje X
    axis.title.y = element_text(size = 17),  # Tamaño del título del eje Y
    legend.text = element_text(size = 16.5),  # Tamaño del texto de la leyenda
    legend.title = element_text(size = 14), # Tamaño y estilo del título de la leyenda
    legend.key.size = unit(0.8, "cm"),  # Tamaño de las claves de la leyenda
    legend.position = "top"  # Posición de la leyenda
  ) 
print(grafico_CRP)
```
```{r, echo = FALSE, warning=FALSE}
# Proporciones calculadas
proporcionLDH_sano = round(nrow(Arkansas_SDF[Arkansas_SDF$LDH_flag == 0,]) / numero_observaciones,4)
proporcionLDH_mal = round(nrow(Arkansas_SDF[Arkansas_SDF$LDH_flag == 1, ]) / numero_observaciones,4)

# Gráfico de LDH
grafico_LDH = Arkansas_SDF %>%
  ggplot(aes(x = LDH, fill = factor(LDH_flag, , levels = c(1, 0)))) +
  geom_histogram(color = "black", alpha = 1, binwidth = 10, size = 0.5) +
  
  # Personalización de la leyenda
  scale_fill_manual(
    name = "Estado",
    values = colores,
    labels = c(
      paste0("No saludable: ", proporcionLDH_mal * 100, "%"),
      paste0("Saludable: ", proporcionLDH_sano * 100, "%")
    )
  ) +
  # Títulos y etiquetas
  ggtitle("Distribución de LDH") +
  labs(x = "Nivel de LDH", y = "Frecuencia") +
  theme_classic() +
  theme(
    plot.title = element_text(size = 19, face = "bold", hjust = 0.5), # Título principal
    axis.text.x = element_text(size = 18),  # Tamaño del texto del eje X
    axis.text.y = element_text(size = 18),  # Tamaño del texto del eje Y
    axis.title.x = element_text(size = 17), # Tamaño del título del eje X
    axis.title.y = element_text(size = 17),  # Tamaño del título del eje Y
    legend.text = element_text(size = 17),  # Tamaño del texto de la leyenda
    legend.title = element_text(size = 14.5), # Tamaño y estilo del título de la leyenda
    legend.key.size = unit(0.8, "cm"),  # Tamaño de las claves de la leyenda
    legend.position = "top"  # Posición de la leyenda
  ) 
print(grafico_LDH)
```
```{r, echo = FALSE, warning=FALSE}
# Proporciones calculadas
proporcionALB_sano = round(nrow(Arkansas_SDF[Arkansas_SDF$ALB_flag == 0,]) / numero_observaciones,4)
proporcionALB_mal = round(nrow(Arkansas_SDF[Arkansas_SDF$ALB_flag == 1, ]) / numero_observaciones,4)

# Gráfico de ALB
grafico_ALB = Arkansas_SDF %>%
  ggplot(aes(x = ALB, fill = factor(ALB_flag,, levels = c(1, 0)))) +
  geom_histogram(color = "black", alpha = 1, binwidth = 0.1, size = 0.5) +
  
  # Personalización de la leyenda
  scale_fill_manual(
    name = "Estado",
    values = colores,
    labels = c(
      paste0("No saludable: ", proporcionALB_mal * 100, "%"),
      paste0("Saludable: ", proporcionALB_sano * 100, "%")
    )
  ) +
  # Títulos y etiquetas
  ggtitle("Distribución de ALB") +
  labs(x = "Nivel de ALB", y = "Frecuencia") +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 19, face = "bold", hjust = 0.5), # Título principal
    axis.text.x = element_text(size = 18),  # Tamaño del texto del eje X
    axis.text.y = element_text(size = 18),  # Tamaño del texto del eje Y
    axis.title.x = element_text(size = 17), # Tamaño del título del eje X
    axis.title.y = element_text(size = 17),  # Tamaño del título del eje Y
    legend.text = element_text(size = 17),  # Tamaño del texto de la leyenda
    legend.title = element_text(size = 14.5), # Tamaño y estilo del título de la leyenda
    legend.key.size = unit(0.8, "cm"),  # Tamaño de las claves de la leyenda
    legend.position = "top"  # Posición de la leyenda
  ) 
print(grafico_ALB)
```

```{r}
# Proporciones calculadas
proporcionHGB_sano_hombres = round(nrow(Arkansas_SDF[Arkansas_SDF$HGB_flag == 0 & Arkansas_SDF$SEX == "male",]) / numero_hombres,4)
proporcionHGB_mal_hombres = round(nrow(Arkansas_SDF[Arkansas_SDF$HGB_flag == 1 & Arkansas_SDF$SEX == "male", ]) / numero_hombres, 4)

# Gráfico para hombres
grafico_HGB_MALE = Arkansas_SDF %>%
  filter(SEX == "male") %>%
  ggplot(aes(x = HGB, fill = factor(HGB_flag, levels = c(1, 0)))) +
  geom_histogram(color = "black", alpha = 1, binwidth = 0.5, size = 0.5) +
  
  # Personalización de la leyenda
  scale_fill_manual(
    name = "Estado",
    values = colores,
    labels = c(
      paste0("No saludable: ", proporcionHGB_mal_hombres * 100, "%"),
      paste0("Saludable: ", proporcionHGB_sano_hombres * 100, "%")
    )
  ) +
  # Títulos
  ggtitle("Distribución de HGB en hombres") +
  labs(x = "Nivel de Hemoglobina", y = "Frecuencia") +
  scale_x_continuous(breaks = pretty_breaks(n = 10)) +
  theme_classic() +
  theme(
    plot.title = element_text(size = 19, face = "bold", hjust = 0.5), # Título principal
    axis.text.x = element_text(size = 18),  # Tamaño del texto del eje X
    axis.text.y = element_text(size = 18),  # Tamaño del texto del eje Y
    axis.title.x = element_text(size = 17), # Tamaño del título del eje X
    axis.title.y = element_text(size = 17),  # Tamaño del título del eje Y
    legend.text = element_text(size = 17),  # Tamaño del texto de la leyenda
    legend.title = element_text(size = 14.5), # Tamaño y estilo del título de la leyenda
    legend.key.size = unit(0.8, "cm"),  # Tamaño de las claves de la leyenda
    legend.position = "top"  # Posición de la leyenda
  ) 
print(grafico_HGB_MALE)
```

```{r}
# Proporciones calculadas
proporcionHGB_sano_mujeres = round(nrow(Arkansas_SDF[Arkansas_SDF$HGB_flag == 0 & Arkansas_SDF$SEX == "female",]) / numero_mujeres,4)
proporcionHGB_mal_mujeres = round(nrow(Arkansas_SDF[Arkansas_SDF$HGB_flag == 1 & Arkansas_SDF$SEX == "female", ]) / numero_mujeres,4)

# Gráfico para mujeres
grafico_HGB_FEMALE = Arkansas_SDF %>%
  filter(SEX == "female") %>%
  ggplot(aes(x = HGB, fill = factor(HGB_flag, , levels = c(1, 0)))) +
  geom_histogram(color = "black", alpha = 1, binwidth = 0.5, size = 0.5) +
  
  # Personalización de la leyenda
  scale_fill_manual(
    name = "Estado",
    values = colores,
    labels = c(
      paste0("No saludable: ", proporcionHGB_mal_mujeres * 100, "%"),
      paste0("Saludable: ", proporcionHGB_sano_mujeres * 100, "%")
    )
  ) +
  # Títulos
  ggtitle("Distribución de HGB en mujeres") +
  labs(x = "Nivel de Hemoglobina", y = "Frecuencia") +
  scale_x_continuous(breaks = pretty_breaks(n = 10)) +
  theme_classic() +
  theme(
    plot.title = element_text(size = 19, face = "bold", hjust = 0.5),
    axis.text.x = element_text(size = 17),
    axis.text.y = element_text(size = 17),
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    legend.text = element_text(size = 15),
    legend.title = element_text(size = 18),
    legend.key.size = unit(0.7, "cm"),
    legend.position = "top"
  )
print(grafico_HGB_FEMALE)
```
```{r}
grafico_MRI = Arkansas_SDF %>%
  ggplot(aes(x = MRI)) +
  geom_histogram(fill = colores_2, color = "black", alpha = 0.9, bins = 20) +
  # Títulos
  ggtitle("Distribución de MRI",subtitle = "") +
  labs(x = "Nº lesiones focales", y = "Frecuencia") +
  scale_x_continuous(breaks = pretty_breaks(n = 10)) + 
  theme_classic() +
    theme(
  plot.title = element_text(size = 19, face = "bold", hjust = 0.5), # Título principal
  axis.text.x = element_text(size = 18),  # Tamaño del texto del eje X
  axis.text.y = element_text(size = 18),  # Tamaño del texto del eje Y
  axis.title.x = element_text(size = 18), # Tamaño del título del eje X
  axis.title.y = element_text(size = 18)  # Tamaño del título del eje Y
)
grafico_MRI
```
```{r}
grafico_ASPC = Arkansas_SDF %>%
  ggplot(aes(x = ASPC)) +
  geom_histogram(fill = colores_2, color = "black", alpha = 0.9, bins = 20) +
  # Títulos
  ggtitle("Distribución de ASPC",subtitle = "") +
  labs(x = "células plasmáticas malignas (%)", y = "Frecuencia") +
  scale_x_continuous(breaks = pretty_breaks(n = 10)) + 
  theme_classic() +
    theme(
  plot.title = element_text(size = 19, face = "bold", hjust = 0.5), # Título principal
  axis.text.x = element_text(size = 18),  # Tamaño del texto del eje X
  axis.text.y = element_text(size = 18),  # Tamaño del texto del eje Y
  axis.title.x = element_text(size = 18), # Tamaño del título del eje X
  axis.title.y = element_text(size = 18)  # Tamaño del título del eje Y
)
grafico_ASPC
```

```{r}
grafico_BMPC = Arkansas_SDF %>%
  ggplot(aes(x = BMPC)) +
  geom_histogram(fill = colores_2, color = "black", alpha = 0.9, bins = 20) +
  # Títulos
  ggtitle("Distribución de BMPC",subtitle = "") +
  labs(x = "células plasmáticas malignas (%)", y = "Frecuencia") +
  scale_x_continuous(breaks = pretty_breaks(n = 10)) + 
  theme_classic() +
    theme(
  plot.title = element_text(size = 19, face = "bold", hjust = 0.5), # Título principal
  axis.text.x = element_text(size = 18),  # Tamaño del texto del eje X
  axis.text.y = element_text(size = 18),  # Tamaño del texto del eje Y
  axis.title.x = element_text(size = 18), # Tamaño del título del eje X
  axis.title.y = element_text(size = 18)  # Tamaño del título del eje Y
)
grafico_BMPC
```

```{r}
grafico_OS_Time = Arkansas_SDF %>%
  ggplot(aes(x = OS_Time)) +
  geom_histogram(fill = colores_2, color = "black", alpha = 0.9, bins = 20) +
  # Títulos
  ggtitle("Distribución de OS_Time",subtitle = "") +
  labs(x = "Tiempo (meses)", y = "Frecuencia") +
  scale_x_continuous(breaks = pretty_breaks(n = 10)) + 
  theme_classic() +
    theme(
  plot.title = element_text(size = 19, face = "bold", hjust = 0.5), # Título principal
  axis.text.x = element_text(size = 18),  # Tamaño del texto del eje X
  axis.text.y = element_text(size = 18),  # Tamaño del texto del eje Y
  axis.title.x = element_text(size = 18), # Tamaño del título del eje X
  axis.title.y = element_text(size = 18)  # Tamaño del título del eje Y
)
grafico_OS_Time
```

```{r}
grafico_AGE <- Arkansas_SDF %>%
  ggplot(aes(x = AGE)) +
  geom_histogram(aes(y = ..count..), fill = colores_2, color = "black", alpha = 0.9) +
  # Títulos
  ggtitle("Distribución de AGE") +
  labs(x = "Edad (en años)", y = "Frecuencia") +
  scale_x_continuous(breaks = pretty_breaks(n = 10)) + 
  # Tema y ajuste del tamaño del texto de los ejes
  theme_classic() +
  theme(
    plot.title = element_text(size = 19, face = "bold", hjust = 0.5), # Título principal
    axis.text.x = element_text(size = 18),    # Tamaño del texto del eje X
    axis.text.y = element_text(size = 18),    # Tamaño del texto del eje Y
    axis.title.x = element_text(size = 18),   # Tamaño del título del eje X
    axis.title.y = element_text(size = 18)    # Tamaño del título del eje Y
  )
grafico_AGE
```

#### Variables categoricas
```{r}
# Crear el gráfico de barras
grafico_barras_ISOTYPE <- ggplot(na.omit(Arkansas_SDF), aes(x = ISOTYPE)) +
  geom_bar(fill = colores_2 , color = "black") +
  
  # Añadir las frecuencias sobre cada barra
  geom_text(stat = "count", aes(label = ..count..), vjust = -0.5, size = 5) +
  
  # Mejorar la estética del gráfico
  labs(title = "Distribución de ISOTYPE", x = "Isotipo", y = "Frecuencia") +
  ylim(0, max(table(Arkansas_SDF$ISOTYPE)) * 1.1) +  # Aumenta el límite del eje y un 10%
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.text = element_text(size = 18),
    axis.title = element_text(size = 18)
  )
grafico_barras_ISOTYPE
```

```{r}
# Crear el gráfico de barras
grafico_barras_SEX <- ggplot(na.omit(Arkansas_SDF), aes(x = SEX)) +
  geom_bar(fill = colores_2, color = "black") +
  
  # Añadir las frecuencias sobre cada barra
  geom_text(stat = "count", aes(label = ..count..), vjust = -0.5, size = 8) +
  
  # Mejorar la estética del gráfico
  labs(title = "Distribución de SEX", x = "Sexo", y = "Frecuencia") +
  ylim(0, max(table(Arkansas_SDF$ISOTYPE)) * 1.1) +  # Aumenta el límite del eje y un 10%
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.text = element_text(size = 18),
    axis.title = element_text(size = 18)
  )
grafico_barras_SEX
```
```{r}
# Crear el gráfico de barras
grafico_barras_PROT <- ggplot(Arkansas_SDF, aes(x = PROT)) +
  geom_bar(fill = colores_2, color = "black") +
  
  # Añadir las frecuencias sobre cada barra
  geom_text(stat = "count", aes(label = ..count..), vjust = -0.5, size = 8) +
  
  # Mejorar la estética del gráfico
  labs(title = "Distribución de PROT", x = "Tratamiento", y = "Frecuencia") +
  ylim(0, max(table(Arkansas_SDF$PROT)) * 1.1) +  # Aumenta el límite del eje y un 10%
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.text = element_text(size = 18),
    axis.title = element_text(size = 17)
  )
grafico_barras_PROT
```
```{r}
grafico_CytoABN <- ggplot(Arkansas_SDF, aes(x = Cyto_Abn)) +
  geom_bar(fill = colores_2, color = "black") +
  labs(title = "Diagrama de Barras de Cyto_Abn", x = "Alteraciones Citogenéticas", y = "Frecuencia") +
  scale_x_continuous(breaks = c(0, 1), labels = c("Sin alteraciones", "Con alteraciones")) +
  geom_text(stat = "count", aes(label = ..count..), vjust = -0.5, size = 8) +
  ylim(0,400)+
  theme_minimal()+
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.text = element_text(size = 18),
    axis.title = element_text(size = 17)
  )
print(grafico_CytoABN)
```

```{r}
# Seleccionar las variables de interés y omitir los NA
variables_interes <- Arkansas_SDF %>%
  select(AGE, B2M, CRP, CREAT, LDH, ALB, HGB, ASPC, BMPC, MRI)

# Calcular la matriz de correlación
matriz_correlacion <- cor(variables_interes)

# Generar el gráfico de correlación
grafico_correlaciones <- ggcorrplot(matriz_correlacion, 
           hc.order = TRUE,         # Ordenar jerárquicamente
           type = "lower",          # Mostrar solo la mitad inferior
           lab = TRUE,              # Añadir los valores de correlación
           lab_size = 3.7,          # Tamaño del texto de los valores
           colors = c("#4575b4", "#f7f7f7", "#d73027")) +  # Colores personalizados
  ggtitle("Mapa de Correlación de Variables") +    # Añadir título
  labs(x = "Variables", y = "Variables") +         # Títulos de los ejes
  theme(plot.title = element_text(hjust = 0.5, size = 16),   # Centrar el título y ajustar tamaño
        axis.title.x = element_text(size = 14),   # Tamaño del título del eje x
        axis.title.y = element_text(size = 14))   # Tamaño del título del eje y

grafico_correlaciones
```
```{r}
# Guardar el gráfico como PDF
# B2M
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Descriptive_graphs/grafico_barras_B2M.pdf", 
       plot = grafico_B2M,  # Extraer solo el gráfico principal
       width = 10, height = 7, device = "pdf")  # Ajusta el tamaño y formato
# CREAT Male
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Descriptive_graphs/grafico_barras_CREAT_MALE.pdf", 
       plot = grafico_CREAT_MALE, 
       width = 10, height = 7, device = "pdf")
# CREAT Female
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Descriptive_graphs/grafico_barras_CREAT_FEMALE.pdf", 
       plot = grafico_CREAT_FEMALE, 
       width = 10, height = 7, device = "pdf")
# CRP
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Descriptive_graphs/grafico_barras_CRP.pdf", 
       plot = grafico_CRP, 
       width = 10, height = 7, device = "pdf")
# LDH
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Descriptive_graphs/grafico_barras_LDH.pdf", 
       plot = grafico_LDH, 
       width = 10, height = 7, device = "pdf")
# ALB
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Descriptive_graphs/grafico_barras_ALB.pdf", 
       plot = grafico_ALB, 
       width = 10, height = 7, device = "pdf")
# HGB Male
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Descriptive_graphs/grafico_barras_HGB_MALE.pdf", 
       plot = grafico_HGB_MALE, 
       width = 10, height = 7, device = "pdf")
# HGB Female
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Descriptive_graphs/grafico_barras_HGB_FEMALE.pdf", 
       plot = grafico_HGB_FEMALE, 
       width = 10, height = 7, device = "pdf")
# HGB Female
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Descriptive_graphs/grafico_barras_HGB_FEMALE.pdf", 
       plot = grafico_HGB_FEMALE, 
       width = 10, height = 7, device = "pdf")
# ASPC
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Descriptive_graphs/grafico_barras_ASPC.pdf", 
       plot = grafico_ASPC, 
      width = 10, height = 7, device = "pdf")
# BMPC
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Descriptive_graphs/grafico_barras_BMPC.pdf", 
       plot = grafico_BMPC, 
       width = 10, height = 7, device = "pdf")
# MRI
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Descriptive_graphs/grafico_barras_MRI.pdf", 
       plot = grafico_MRI, 
       width = 10, height = 7, device = "pdf")
# OS_TIME
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Descriptive_graphs/grafico_barras_OS_TIME.pdf", 
       plot = grafico_OS_Time, 
       width = 10, height = 7, device = "pdf")
# AGE
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Descriptive_graphs/grafico_barras_AGE.pdf", 
       plot = grafico_AGE,  # Extraer solo el gráfico principal
       width = 10, height = 7, device = "pdf")  # Ajusta el tamaño y formato
# SEX
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Descriptive_graphs/grafico_barras_SEX.pdf", 
       plot = grafico_barras_SEX, 
       width = 10, height = 7, device = "pdf")
# ISOTYPE
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Descriptive_graphs/grafico_barras_ISOTYPE.pdf", 
       plot = grafico_barras_ISOTYPE, 
       width = 10, height = 7, device = "pdf")
# PROT
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Descriptive_graphs/grafico_barras_PROT.pdf", 
       plot = grafico_barras_PROT, 
       width = 10, height = 7, device = "pdf")
# CYTO_ABN
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Descriptive_graphs/grafico_CytoABN.pdf", 
       plot = grafico_CytoABN, 
       width = 10, height = 7, device = "pdf")

# CORRELACIONES
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Descriptive_graphs/grafico_Correlaciones.pdf", 
       plot = grafico_correlaciones, 
       width = 10, height = 7, device = "pdf")
```

# MODELO DE COX [SIN DATOS FALTANTES]{.underline}
```{r}
# Hay que convertir la Variable ISOTYPE en variables "dummies"
Arkansas_SDF <- model.matrix(~ISOTYPE - 1, data = Arkansas_SDF) %>%
  as.data.frame() %>%
  cbind(Arkansas_SDF)
```

```{r}
# Cargar librerías necesarias
library(factoextra)
library(cluster)

datos_clustering <- Arkansas_SDF[Arkansas_SDF$OS_Censor == 1,]
datos_clustering <- Arkansas_SDF
variables_numericas <- datos_clustering[, c("AGE", "B2M", "LDH", "ALB", "MRI", "OS_Time")] 
variables_numericas_scaled <- scale(variables_numericas)

# Determinar el número óptimo de clusters con el método del codo
fviz_nbclust(variables_numericas_scaled, kmeans, method = "wss") +
  labs(title = "Método del Codo para Determinar el Número de Clusters")

# Aplicar K-means clustering con el número óptimo de clusters 
set.seed(123) # Para reproducibilidad
kmeans_result <- kmeans(variables_numericas_scaled, centers =2, nstart = 30)

# Añadir el cluster a los datos originales
datos_clustering$Cluster <- as.factor(kmeans_result$cluster)

# Visualizar los clusters con PCA
fviz_cluster(kmeans_result, data = variables_numericas_scaled,
             geom = "point", ellipse.type = "convex", 
             ggtheme = theme_minimal()) +
  labs(title = "Visualización de Clusters con K-means")

# Calcular la matriz de distancia para clustering jerárquico
matriz_distancia <- dist(variables_numericas_scaled)

# Clustering jerárquico
hclust_result <- hclust(matriz_distancia, method = "ward.D2")

# Visualizar el dendrograma con 3 clusters
fviz_dend(hclust_result, k = 2, # Número de clusters
          rect = TRUE, # Dibujar rectángulos alrededor de los clusters
          rect_fill = TRUE,
          rect_border = "jco",
          labels_track_height = 0.8) +
  labs(title = "Dendrograma de Clustering Jerárquico")

# Evaluar la calidad de los clusters con análisis de silhouette
fviz_silhouette(cluster::silhouette(kmeans_result$cluster, dist(variables_numericas_scaled)))

# Resumir las variables numéricas por cluster
cluster_summary <- datos_clustering %>%
  group_by(Cluster) %>%
  summarise(across(where(is.numeric), mean, .names = "mean_{.col}"))

# Mostrar la tabla resumen
kmeans_result$centers
print(cluster_summary)
```

#### Análisis del modelo univariable
Calculamos, para cada variable, un modelo de Cox univariable para observar la significancia individual que tienen.

```{r}
covariates <- c("AGE", "SEX", "PROT" ,"B2M", "ISOTYPEFLC", "ISOTYPEIgA", "ISOTYPEIgD", "ISOTYPEIgG" ,"CRP", "CREAT","LDH","ALB","HGB", "ASPC","BMPC", "MRI","Cyto_Abn")
univ_formulas <- sapply(covariates,
                        function(x) as.formula(paste('Surv(OS_Time, OS_Censor)~', x)))
                        
univ_models <- lapply( univ_formulas, function(x){coxph(x, data = Arkansas_SDF)})
# Extract data 
univ_results <- lapply(univ_models,
                       function(x){ 
                          x <- summary(x)
                          p.value<-signif(x$wald["pvalue"], digits=4)
                          wald.test<-signif(x$wald["test"], digits=4)
                          beta<-signif(x$coef[1], digits=4);#coeficient beta
                          HR <-signif(x$coef[2], digits=4);#exp(beta)
                          res<-c(beta, HR, wald.test, p.value)
                          names(res)<-c("beta", "HR (95% CI for HR)", "wald.test", 
                                        "p.value")
                          return(res)
                          #return(exp(cbind(coef(x),confint(x))))
                         })

# Generar y guardar la tabla en formato Latex
res <- t(as.data.frame(univ_results, check.names = FALSE))
as.data.frame(res)
tabla_latex <- xtable(res, caption = "Descripción del modelo univariante", label = "Tabla: Cox Univariante")
print(tabla_latex, file = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/tabla_cox_univariante.tex", include.rownames = TRUE)
```
El P.valor de las variables de SEX, PROT, CRP y ISOTYPE nos indica que el nivel de sinificancia en el riesgo de muerte no es relevante.

Por otra parte, tenemos otras variables que si contribuyen al riesgo de muerte, como son la AGE, el ASPC, BMPC, MRI, HGB.

Por último, los variables con mayor signifinacia son B2M, CREAT, LDH, ALB y Cyto_Abn.

Aunque la edad aparece con una signifancia "media", hay que tener en cuenta que la mayoria de los individuos, el 75% de ellos, tienen más de 50 años. Por lo que, en la base de datos, no tenemos suficientes individuos para representar a la población joven.

Realicemos un estudio para determinar cual de las 13 variables consideradas son significativas para construir el modelo.

### Modelo con todas las variables

```{r}
# Ajustar el modelo de Cox
modelo_inicial <- coxph(Surv(OS_Time, OS_Censor) ~ AGE + SEX + PROT + B2M + ISOTYPEFLC + ISOTYPEIgA + ISOTYPEIgG + CRP + CREAT + LDH + ALB + HGB + ASPC + BMPC + MRI + Cyto_Abn , data = Arkansas_SDF)

# Resumir el modelo
modelo_inicial_summary <- summary(modelo_inicial)

# Crear un dataframe con los coeficientes y otras estadísticas de interés
tabla_cox <- data.frame(
  coef = round(modelo_inicial_summary$coefficients[, "coef"], 4),
  exp_coef = round(modelo_inicial_summary$coefficients[, "exp(coef)"], 4),
  se_coef = round(modelo_inicial_summary$coefficients[, "se(coef)"], 4),
  z = round(modelo_inicial_summary$coefficients[, "z"], 3),
  p_value = round(modelo_inicial_summary$coefficients[, "Pr(>|z|)"],4)
)

# Cambiar los nombres de las columnas para que sean más comprensibles
colnames(tabla_cox) <- c("Coeficiente Beta", "Exp(Coef)", "Error Estándar", "Z-valor", "P-valor")

# Mostrar la tabla generada
print(tabla_cox)

# Generar y guardar la tabla en formato Latex
kable(tabla_cox, format = "latex", booktabs = TRUE, caption = "Resultados del modelo de Cox") %>%
  kable_styling(latex_options = c("hold_position")) %>%
  save_kable("/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/tabla_cox_multivariante.tex")
```
Observamos que cuando combinamos las variables más significativas, algunas de obtienen un valor muy elevado, destaca el caso de la CREAT, que obtiene un p-valor muy próximo a 1.

Esto, es debido a la **multicolinealidad**, es dicir, a que hay variables que tienen un alto grado de correlación con otras y el modelo no es capaz de identificar cual de las dos variables es la que es significativa en el modelo.

Para la selección de las variables y evitar la multicolinealidad, usaremos el método de **selección hacia atrás**

### Modelo usando métodos de selección de variables
```{r}
# Ajustar el modelo inicial con todas las variables
modelo_inicial <- coxph(Surv(OS_Time, OS_Censor) ~ AGE + SEX + PROT + B2M + ISOTYPEFLC + ISOTYPEIgA + ISOTYPEIgD + ISOTYPEIgG + CRP + CREAT + LDH + ALB + HGB + ASPC + BMPC + MRI + Cyto_Abn, data = Arkansas_SDF)

# Aplicar selección hacia atrás
modelo_backward <- step(modelo_inicial, direction = "backward", trace = FALSE)

# Resumir el modelo final ajustado
modelo_backward_summary <- summary(modelo_backward)
print(modelo_backward_summary)
# Crear un dataframe con los coeficientes y estadísticas del modelo ajustado
tabla_backward <- data.frame(
  coef = formatC(modelo_backward_summary$coefficients[, "coef"], 5),
  exp_coef = formatC(modelo_backward_summary$coefficients[, "exp(coef)"], format = "g", digits = 5),
  se_coef = formatC(modelo_backward_summary$coefficients[, "se(coef)"], format = "g", digits = 5),
  z = formatC(modelo_backward_summary$coefficients[, "z"], format = "g", digits = 5),
  p_value = formatC(modelo_backward_summary$coefficients[, "Pr(>|z|)"], format = "g", digits = 2  )
)

# Renombrar las columnas para mayor claridad
colnames(tabla_backward) <- c("Coeficiente", "Exp(Coef)", "Error Estándar", "Z-valor", "P-valor")

# Extraer la trayectoria de selección de variables
historial <- modelo_backward$anova

# Crear un dataframe con los pasos y el AIC
datos_seleccion <- data.frame(
  Paso = seq_along(historial$Step),
  Variable = historial$Step,
  AIC = historial$AIC
)

# Generar el gráfico
ggplot(datos_seleccion, aes(x = Paso, y = AIC, label = Variable)) +
  geom_line(color = "blue", size = 1) +  # Línea de evolución del AIC
  geom_point(size = 3, color = "red") +  # Puntos en cada paso
  geom_text(vjust = -1, size = 5) +  # Etiquetas de variables eliminadas
  theme_minimal() +
  labs(title = "Evolución del AIC en la selección backward",
       x = "Paso de eliminación",
       y = "AIC") +
  theme(plot.title = element_text(size = 14, face = "bold"))

# Mostrar la tabla generada
print(tabla_backward)
```
```{r}
modelo_backward <- update(modelo_backward, . ~ . - ISOTYPEFLC) # Eliminamos la variable del modelo
print(modelo_backward)
# Resumir el modelo final ajustado
modelo_backward_summary <- summary(modelo_backward)
# Crear un dataframe con los coeficientes y estadísticas del modelo ajustado
tabla_backward <- data.frame(
  coef = formatC(modelo_backward_summary$coefficients[, "coef"], 5),
  exp_coef = formatC(modelo_backward_summary$coefficients[, "exp(coef)"], format = "g", digits = 5),
  se_coef = formatC(modelo_backward_summary$coefficients[, "se(coef)"], format = "g", digits = 5),
  z = formatC(modelo_backward_summary$coefficients[, "z"], format = "g", digits = 5),
  p_value = formatC(modelo_backward_summary$coefficients[, "Pr(>|z|)"], format = "g", digits = 2  )
)

# Generar y guardar la tabla en formato LaTeX
tabla_latex <- xtable(tabla_backward, caption = "Resultados del modelo final después de selección hacia atrás")
print(tabla_latex, file = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/tabla_cox_backward.tex", include.rownames = TRUE)
```
```{r}
ggforest(modelo_backward, data = Arkansas_SDF, main = "Forest Plot")
```
age: El coeficiente es positivo (0.016140), lo que sugiere que un aumento en la edad incrementa ligeramente el riesgo, pero el valor p (0.063447) indica que el efecto es marginalmente significativo (cercano a 0.05, pero no lo suficiente). B2M: Tiene un coeficiente positivo (0.045930), lo que indica que el aumento en B2M incrementa el riesgo de manera significativa (p = 2.81e-06). Su HR es 1.047, lo que significa que por cada unidad adicional en B2M, el riesgo aumenta en un 4.7%. LDH: También tiene un coeficiente positivo y es altamente significativo (p = 0.000197). Un aumento en LDH incrementa el riesgo, aunque en menor magnitud, un 0.04% (HR = 1.004). ALB: El coeficiente es negativo (-0.438302), lo que significa que un aumento en la albúmina disminuye el riesgo. Es un efecto significativo (p = 0.000637) y el HR de 0.645131 indica una reducción del 35.49% en el riesgo por cada unidad adicional de albúmina. MRI: Tiene un coeficiente positivo y significativo (p = 0.013479), indicando que un aumento en los valores de MRI incrementa el riesgo (HR = 1.011635). Cyto_Abn: Tiene un coeficiente positivo (0.604041), lo que indica que la presencia de anomalías citogenéticas aumenta significativamente el riesgo (p = 0.000283), con un HR de 1.829496, es decir, el riesgo se incrementa en un 82.95%.

Gráfico del modelo de Cox

```{r}
curva_supervivencia <- survfit(modelo_backward)

ggsurvplot(curva_supervivencia, data = Arkansas_SDF, 
             conf.int = TRUE,          
             pval = TRUE,              
             risk.table = TRUE,        
             ggtheme = theme_minimal(),
             palette = c("#E69F00", "#56B4E9")) 
```
# Gráficos Kaplan-Meier

```{r}
colores_surv =  c("#0072B2", "#D95F02", "#F0E442", "#999999")

# Crear los gráficos de supervivencia
grafico_surv_age <- ggsurvplot(
  survfit(Surv(OS_Time, OS_Censor) ~ AGE_flag, data = Arkansas_SDF), 
  data = Arkansas_SDF, 
  pval = TRUE,
  palette = colores_surv,  # Define la paleta de colores
  legend.labs = c("Menores de 50", "Mayores de 50"),  # Texto de la leyenda
  xlab = "Tiempo (meses)",  # Cambiar texto del eje X
  ylab = "Probabilidad de supervivencia (%)",# Cambiar texto del eje Y
  title = "Edad"
)
grafico_surv_age <- grafico_surv_age$plot + 
  theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
  axis.text.x = element_text(size = 18),  # Tamaño del texto del eje X
  axis.text.y = element_text(size = 18),  # Tamaño del texto del eje Y
  axis.title.x = element_text(size = 18), # Tamaño del título del eje X
  axis.title.y = element_text(size = 18),  # Tamaño del título del eje Y
  legend.text = element_text(size = 20),
  legend.title = element_text(size = 16)
)+ 
  guides(color = guide_legend(override.aes = list(linetype = 0, shape = 15, size = 5)))

grafico_surv_B2M <- ggsurvplot(
  survfit(Surv(OS_Time, OS_Censor) ~ B2M_flag, data = Arkansas_SDF), 
  data = Arkansas_SDF, 
  pval = TRUE,
  palette = colores_surv,  # Define la paleta de colores
  legend.labs = c("Niveles nomales", "Niveles alterados"),  # Texto de la leyenda
  xlab = "Tiempo (meses)",  # Cambiar texto del eje X
  ylab = "Probabilidad de supervivencia (%)",  # Cambiar texto del eje Y
  title = "B2M"
  )
grafico_surv_B2M <- grafico_surv_B2M$plot +
  theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
  axis.text.x = element_text(size = 18),  # Tamaño del texto del eje X
  axis.text.y = element_text(size = 18),  # Tamaño del texto del eje Y
  axis.title.x = element_text(size = 18), # Tamaño del título del eje X
  axis.title.y = element_text(size = 18),  # Tamaño del título del eje Y
  legend.text = element_text(size = 20),
  legend.title = element_text(size = 16)
  )+ 
  guides(color = guide_legend(override.aes = list(linetype = 0, shape = 15, size = 5)))

grafico_surv_ALB <- ggsurvplot(
  survfit(Surv(OS_Time, OS_Censor) ~ ALB_flag, data = Arkansas_SDF), 
  data = Arkansas_SDF, 
  pval = TRUE,
  palette = colores_surv,  # Define la paleta de colores
  legend.labs = c("Niveles nomales", "Niveles alterados"),  # Texto de la leyenda
  xlab = "Tiempo (meses)",  # Cambiar texto del eje X
  ylab = "Probabilidad de supervivencia (%)",  # Cambiar texto del eje Y
  title = "ALB"
)
grafico_surv_ALB <- grafico_surv_ALB$plot +  
  theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
  axis.text.x = element_text(size = 18),  # Tamaño del texto del eje X
  axis.text.y = element_text(size = 18),  # Tamaño del texto del eje Y
  axis.title.x = element_text(size = 18), # Tamaño del título del eje X
  axis.title.y = element_text(size = 18),  # Tamaño del título del eje Y
  legend.text = element_text(size = 20),
  legend.title = element_text(size = 16)
)+ 
  guides(color = guide_legend(override.aes = list(linetype = 0, shape = 15, size = 5)))

grafico_surv_LDH <- ggsurvplot(
  survfit(Surv(OS_Time, OS_Censor) ~ LDH_flag, data = Arkansas_SDF), 
  data = Arkansas_SDF, 
  pval = TRUE,
  palette = colores_surv,  # Define la paleta de colores
  legend.labs = c("Niveles nomales", "Niveles alterados"),  # Texto de la leyenda
  xlab = "Tiempo (meses)",  # Cambiar texto del eje X
  ylab = "Probabilidad de supervivencia (%)",  # Cambiar texto del eje Y
  title = "LDH"
  )
grafico_surv_LDH <- grafico_surv_LDH$plot +  
  theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
  axis.text.x = element_text(size = 18),  # Tamaño del texto del eje X
  axis.text.y = element_text(size = 18),  # Tamaño del texto del eje Y
  axis.title.x = element_text(size = 18), # Tamaño del título del eje X
  axis.title.y = element_text(size = 18),  # Tamaño del título del eje Y
  legend.text = element_text(size = 20),
  legend.title = element_text(size = 16)
)+ 
  guides(color = guide_legend(override.aes = list(linetype = 0, shape = 15, size = 5)))

grafico_surv_MRI <- ggsurvplot(
  survfit(Surv(OS_Time, OS_Censor) ~ MRI_flag, data = Arkansas_SDF), 
  data = Arkansas_SDF, 
  pval = TRUE,
  palette = colores_surv,  # Define la paleta de colores
  legend.labs = c("Niveles bajos", "Niveles medios", "Niveles altos","Niveles muy altos"),  # Texto de la leyenda
  xlab = "Tiempo (meses)",  # Cambiar texto del eje X
  ylab = "Probabilidad de supervivencia (%)",  # Cambiar texto del eje Y
  title = "MRI"
  )
grafico_surv_MRI <- grafico_surv_MRI$plot + 
  theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
  axis.text.x = element_text(size = 18),  # Tamaño del texto del eje X
  axis.text.y = element_text(size = 18),  # Tamaño del texto del eje Y
  axis.title.x = element_text(size = 18), # Tamaño del título del eje X
  axis.title.y = element_text(size = 18),  # Tamaño del título del eje Y
  legend.text = element_text(size = 20),
  legend.title = element_text(size = 16)
)+ 
  guides(color = guide_legend(override.aes = list(linetype = 0, shape = 15, size = 5)))

grafico_surv_CYTO <- ggsurvplot(
  survfit(Surv(OS_Time, OS_Censor) ~ Cyto_Abn, data = Arkansas_SDF), 
  data = Arkansas_SDF, 
  pval = TRUE,
  palette = colores_surv,  # Define la paleta de colores
  legend.labs = c("Sin alteraciones", "Con alteraciones"),  # Texto de la leyenda
  xlab = "Tiempo (meses)",  # Cambiar texto del eje X
  ylab = "Probabilidad de supervivencia (%)",  # Cambiar texto del eje Y
  title = "Cyto_Abn"
  )
grafico_surv_CYTO <- grafico_surv_CYTO$plot +  
  theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
  axis.text.x = element_text(size = 18),  # Tamaño del texto del eje X
  axis.text.y = element_text(size = 18),  # Tamaño del texto del eje Y
  axis.title.x = element_text(size = 18), # Tamaño del título del eje X
  axis.title.y = element_text(size = 18),  # Tamaño del título del eje Y
  legend.text = element_text(size = 20),
  legend.title = element_text(size = 16)
)+ 
  guides(color = guide_legend(override.aes = list(linetype = 0, shape = 15, size = 5)))

print(grafico_surv_age)
print(grafico_surv_B2M)
print(grafico_surv_ALB)
print(grafico_surv_MRI)
print(grafico_surv_LDH)
print(grafico_surv_CYTO)
```

Comprobemos si el supuesto de que los datos siguen una distribución exponencial o Weibull es factible.
```{r}
verificar <- function(data, survivalTimes, survivalTimesCensor){
# Estimación de la función de supervivencia de Kaplan-Meier
km_fit <- survfit(Surv(survivalTimes, survivalTimesCensor) ~ 1, data = data)

# Extraer tiempos y supervivencias estimadas
time_points <- km_fit$time
S_t <- km_fit$surv

# Aplicar transformación log S(t) vs. t
log_S <- log(S_t)

# Crear un dataframe para graficar
plot_data <- data.frame(time_points, log_S)

# Gráfico de validación exponencial
grafico_comprobacion_exponencial <- ggplot(plot_data, aes(x = time_points, y = log_S)) +
  geom_point(size = 1,  position = position_jitter(width = 0.2, height = 0), color = "#1f78b4", alpha = 0.65) +
  geom_smooth(method = "lm", se = TRUE, color = "red") +
  labs(
    title = "Comprobación supuesto exponencial",
    subtitle = "Gráfico Log S(t) vs. t",
    x = "t",
    y = "Log S(t)"
  ) +
  ylim(-1, 0.2) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 16)
  )

# Aplicar transformación log(-log(S(t))) vs. log(t)
log_time <- log(time_points)
log_neg_log_S <- log(-log(S_t))

# Crear un dataframe para graficar
plot_data <- data.frame(log_time, log_neg_log_S)

# Gráfico
grafico_comprobacion_weibull <- ggplot(plot_data, aes(x = log_time, y = log_neg_log_S)) +
  geom_point(color = "#1f78b4", alpha = 0.65) +
  geom_smooth(method = "lm", se = TRUE, color = "red") + # Línea de regresión con IC
  labs(title = "Comprobación supuesto Weibull",
    subtitle = "Gráfico Log(-Log S(t)) vs. Log t",
       x = "Log t",
       y = "Log(-Log S(t))") +
  ylim(-10, 0) +
  theme_minimal()+
  theme(
  plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 16)
  )

return(list(exponencial = grafico_comprobacion_exponencial, weibull = grafico_comprobacion_weibull))
}
graficos <- verificar(data = Arkansas_SDF, survivalTimes = Arkansas_SDF$OS_Time, survivalTimesCensor = Arkansas_SDF$OS_Censor)

graficos$exponencial
graficos$weibull
```



```{r}
# Ajustar modelos paramétricos con distintas distribuciones
modelo_exp <- survreg(Surv(OS_Time, OS_Censor) ~ AGE + SEX + PROT + B2M + ISOTYPEFLC + 
                      ISOTYPEIgA + ISOTYPEIgD + ISOTYPEIgG + CRP + CREAT + LDH + ALB + 
                      HGB + ASPC + BMPC + MRI + Cyto_Abn, data = Arkansas_SDF, dist = "exponential")
modelo_exp_backward <- step(modelo_exp, direction = "backward", trace = FALSE)

# Resumir el modelo final ajustado
modelo_exp_backward_summary <- summary(modelo_exp_backward)
coeficientes <- modelo_exp_backward_summary$coefficients
# Calcular Hazard Ratio (HR) aplicando la transformación e^(-beta)
HR_exponencial <- exp(-coeficientes)
print(HR_exponencial)
print(modelo_exp_backward_summary)


modelo_weibull <- survreg(Surv(OS_Time, OS_Censor) ~ AGE + SEX + PROT + B2M + ISOTYPEFLC + 
                          ISOTYPEIgA + ISOTYPEIgD + ISOTYPEIgG + CRP + CREAT + LDH + ALB + 
                          HGB + ASPC + BMPC + MRI + Cyto_Abn, data = Arkansas_SDF, dist = "weibull")
modelo_weibull_backward <- step(modelo_weibull, direction = "backward", trace = FALSE)

modelo_weibull_backward_summary <- summary(modelo_weibull_backward)

print(modelo_weibull_backward_summary)
```

```{r}
# Guardado de gráficos y tablas sobre análisis de superviviencia

# K-M Age
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Survival_graphs/grafico_surv_age.pdf", 
       plot = grafico_surv_age, 
       width = 10, height = 7, device = "pdf")
# K-M B2M
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Survival_graphs/grafico_surv_B2M.pdf", 
       plot = grafico_surv_B2M, 
       width = 10, height = 7, device = "pdf")
# K-M ALB
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Survival_graphs/grafico_surv_ALB.pdf", 
       plot = grafico_surv_ALB, 
       width = 10, height = 7, device = "pdf")
# K-M MRI
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Survival_graphs/grafico_surv_MRI.pdf", 
       plot = grafico_surv_MRI, 
       width = 10, height = 7, device = "pdf")
# K-M LDH
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Survival_graphs/grafico_surv_LDH.pdf", 
       plot = grafico_surv_LDH, 
       width = 10, height = 7, device = "pdf")
#K-M Cyto
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Survival_graphs/grafico_surv_CYTO.pdf", 
       plot = grafico_surv_CYTO, 
       width = 10, height = 7, device = "pdf")

# Comprobación supuesto Exponencial
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Survival_graphs/grafico_comprobacion_exp.pdf", 
       plot = graficos$exponencial, 
       width = 10, height = 7, device = "pdf")

# Comprobación supuesto Weibull
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Survival_graphs/grafico_comprobacion_weibull.pdf", 
       plot = graficos$weibull, 
       width = 10, height = 7, device = "pdf")


```

```{r}
pred_backward <- predict(modelo_backward, type = "lp")
pred_exp <-  -predict(modelo_exp_backward, type = "lp")
pred_weibull <- -predict(modelo_weibull_backward, type = "lp")

```


## Residuos Cox-Snell

```{r}
# Calcular los residuos de Cox-Snell para los tres modelos
residuos_cox_snell_modelo_no_parametrico <- pred_backward
residuos_cox_snell_modelo_exp <- pred_exp
residuos_cox_snell_modelo_weibull <- pred_weibull

# Crear un nuevo conjunto de datos que contenga los residuos de Cox-Snell y la información de censura para cada modelo
datos_cox_snell_no_parametrico <- data.frame(
  residuos_cox_snell = residuos_cox_snell_modelo_no_parametrico,
  OS_Censor = Arkansas_SDF$OS_Censor
)

datos_cox_snell_exp <- data.frame(
  residuos_cox_snell = residuos_cox_snell_modelo_exp,
  OS_Censor = Arkansas_SDF$OS_Censor
)

datos_cox_snell_weibull <- data.frame(
  residuos_cox_snell = residuos_cox_snell_modelo_weibull,
  OS_Censor = Arkansas_SDF$OS_Censor
)
# Ajustar modelos de Kaplan-Meier a los residuos de Cox-Snell
modelo_kaplan_meier_no_parametrico <- survfit(Surv(residuos_cox_snell, OS_Censor) ~ 1, data = datos_cox_snell_no_parametrico)
modelo_kaplan_meier_exp <- survfit(Surv(residuos_cox_snell, OS_Censor) ~ 1, data = datos_cox_snell_exp)
modelo_kaplan_meier_weibull <- survfit(Surv(residuos_cox_snell, OS_Censor) ~ 1, data = datos_cox_snell_weibull)

# Graficar la función de supervivencia acumulada para cada modelo
grafico_no_parametrico <- ggplot() +
  geom_step(aes(x = modelo_kaplan_meier_no_parametrico$time, y = modelo_kaplan_meier_no_parametrico$surv), color = "blue") +
  geom_abline(intercept = 1, slope = -1, linetype = "dashed", color = "red") +
  labs(
    subtitle = "Modelo Cox",
    x = "",
    y = "Función de Supervivencia Acumulada"
  ) +
  theme_minimal()+
  xlim(-2, 6.5)+
  theme(
  plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size =14)
  )

grafico_exp <- ggplot() +
  geom_step(aes(x = modelo_kaplan_meier_exp$time, y = modelo_kaplan_meier_exp$surv), color = "blue") +
  geom_abline(intercept = 1, slope = -1, linetype = "dashed", color = "red") +
  labs(
    subtitle = "Modelo Exponencial",
    x = "",
    y = ""
  ) +
  theme_minimal()+
  xlim(-6.5, 2)+
    theme(
  plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 14)
  )

grafico_weibull <- ggplot() +
  geom_step(aes(x = modelo_kaplan_meier_weibull$time, y = modelo_kaplan_meier_weibull$surv), color = "blue") +
  geom_abline(intercept = 1, slope = -1, linetype = "dashed", color = "red") +
  labs(
    subtitle = "Modelo Weibull",
    x = "",
    y = ""
  ) +
  theme_minimal()+
  xlim(-6.5, 2)+
  theme(
    plot.subtitle = element_text(hjust = 0.5, size = 14)
  )

# Colocar los tres gráficos uno al lado del otro
graficoComparacionResCoxSnell <- grid.arrange(grafico_no_parametrico, 
             grafico_exp, 
             grafico_weibull, 
             ncol = 3,
             top = "Comparación residuos de Cox-Snell",
             bottom = textGrob("Residuos de Cox-Snell", hjust = 0.5))

  
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Survival_graphs/grafico_comparacion_res_CoxSnell.pdf", plot = graficoComparacionResCoxSnell, width = 10, height = 6)

```
## Residuos de Martingale

```{r}
# Calculamos los residuos de Martingale
residuos_martingale <- residuals(modelo_backward, type = "martingale")


Sobrevida <- 1 - pweibull(modelo_exp_backward$y[,1], 
             shape=1,
             scale=exp(predict(modelo_exp_backward, type="lp")))

Martingale_Exp <- modelo_exp_backward$y[,2]+log(Sobrevida)

Sobrevida <- 1 - pweibull(modelo_weibull_backward$y[,1], 
                          shape=1/modelo_weibull_backward$scale,
                          scale=exp(predict(modelo_weibull_backward, type="lp")))

Martingale_Weibull <- modelo_weibull_backward$y[,2]+log(Sobrevida)
```

```{r}
# Crear histogramas con ggplot
histMartingaleCox <- ggplot(data.frame(residuos_martingale), aes(x = residuos_martingale)) +
  geom_histogram(fill = "#1f78b4", color = "white", bins = 30) +
  labs(subtitle = "Cox", x = "", y = "Frecuencia") +
  theme_minimal() + 
  theme(
    plot.title = element_text(hjust = 0.5, size = 16),
    plot.subtitle = element_text(hjust = 0.5, size = 14)
  )

histMartingaleExp <- ggplot(data.frame(Martingale_Exp), aes(x = Martingale_Exp)) +
  geom_histogram(fill = "#1f78b4", color = "white", bins = 30) +
  labs(subtitle = "Exponencial", x = "", y = "") +
  theme_minimal() + 
  theme(
    plot.title = element_text(hjust = 0.5, size = 16),
    plot.subtitle = element_text(hjust = 0.5, size = 14)
  )

histMartingaleWeibull <- ggplot(data.frame(Martingale_Weibull), aes(x = Martingale_Weibull)) +
  geom_histogram(fill = "#1f78b4", color = "white", bins = 30) +
  labs(subtitle = "Weibull", x = "", y = "") +
  theme_minimal() + 
  theme(
    plot.title = element_text(hjust = 0.5, size = 16),
    plot.subtitle = element_text(hjust = 0.5, size = 12)
  )

# Mostrar los gráficos en una cuadrícula
histComparacionMartingale <- arrangeGrob(
  histMartingaleCox, 
  histMartingaleExp, 
  histMartingaleWeibull, 
  ncol = 3,
  top = "Distribución de los residuos de Martingale",
  bottom = textGrob("Residuos de Martingale", hjust = 0.5)
)

plots <- list()
variables_backward = c("AGE", "B2M", "LDH","ALB", "MRI")
for (variable in variables_backward) {
  plotCox <- ggplot(data = Arkansas_SDF, aes_string(x = variable, y = "residuos_martingale")) +
    geom_point(color = "#1f78b4", alpha = 0.6) +
    geom_smooth(method = "loess", color = "red") +
    labs(subtitle = "Modelo Cox",
         x = "",
         y = "Residuos de Martingale") +
    theme_minimal() + 
  theme(
    plot.title = element_text(hjust = 0.5, size = 16),
    plot.subtitle = element_text(hjust = 0.5, size = 10)
  )
  
    plotExp <- ggplot(data = Arkansas_SDF, aes_string(x = variable, y = "Martingale_Exp")) +
    geom_point(color = "#1f78b4", alpha = 0.6) +
    geom_smooth(method = "loess", color = "red") +
    labs(subtitle = "Modelo Exponencial",
         x = "",
         y = "") +
    theme_minimal()+ 
  theme(
    plot.title = element_text(hjust = 0.5, size = 16),
    plot.subtitle = element_text(hjust = 0.5, size = 10)
  )
  
    plotWeibull <- ggplot(data = Arkansas_SDF, aes_string(x = variable, y = "Martingale_Weibull")) +
    geom_point(color = "#1f78b4", alpha = 0.6) +
    geom_smooth(method = "loess", color = "red") +
    labs(subtitle = "Modelo Weibull",
         x = "",
         y = "") +
    theme_minimal() + 
  theme(
    plot.title = element_text(hjust = 0.5, size = 16),
    plot.subtitle = element_text(hjust = 0.5, size = 10)
  )

  plotComparacionMartingale <- arrangeGrob(
            plotCox, 
             plotExp, 
             plotWeibull, 
             ncol = 3,
             top = "Comparación residuos de Martingale",
             bottom = textGrob(variable, hjust = 0.5))

    plots[[variable]] <- plotComparacionMartingale
  grid.arrange(plots[[variable]])
}
  
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Survival_graphs/grafico_hist_residuos_martingale.pdf",
       plot = histComparacionMartingale, width = 10, height = 6)
for (variable in variables_backward) {
  ggsave(filename = paste0("/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Survival_graphs/grafico_residuos_martingale_", variable, ".pdf"),
         plot = plots[[variable]], width = 10, height = 6)
}
```

Histograma --\> Para detectar posibles anomalias. Ya que los residuos de martingale van de -infinito a 1.

Gráficos --\> La curva roja es un suavizado que representa la tendencia de los residuos frente a los valores de la variable. La banda gris es el intervalo de confianza. Si la curva se desvía significativamente de la línea horizontal (en 0), puede indicar que la relación entre la variable y el riesgo no es lineal, lo cual podría violar los supuestos del modelo de Cox.

La curva roja parece desviarse de la línea horizontal en valores altos de B2M, lo que sugiere que la relación entre B2M y el riesgo podría no ser lineal. Lo mismo para MRI.

R nos devuelve una alerta indicando: Valores muy alejados del resto de los datos (outliers) pueden causar problemas en el cálculo, por lo que la desviación de la recta 0 puede deberse a esto.

## Deviance

```{r}
# Calcular los residuos de deviance
residuosDevianceCox <- residuals(modelo_backward, type = "deviance")
residuosDevianceExp <- -residuals(modelo_exp_backward, type = "deviance")
residuosDevianceWeibull <- -residuals(modelo_weibull_backward, type = "deviance")
```


```{r,warning=FALSE}

# Crear data.frames para cada modelo
dfCoxDeviance <- data.frame(residuos = residuosDevianceCox)
dfExpDeviance <- data.frame(residuos = residuosDevianceExp)
dfWeibullDeviance <- data.frame(residuos = residuosDevianceWeibull)

# QQ-Plot para Cox
qqCoxDeviance <- ggplot(dfCoxDeviance, aes(sample = residuos)) +
  stat_qq(color = "#1f78b4", alpha = 0.7) +
  stat_qq_line(color = "red") +
  labs(title = "Modelo Cox") +
  theme_minimal()

# QQ-Plot para Exponencial
qqExpDeviance <- ggplot(dfExpDeviance, aes(sample = residuos)) +
  stat_qq(color = "#1f78b4", alpha = 0.7) +
  stat_qq_line(color = "red") +
  labs(title = "Modelo Exponencial") +
  theme_minimal()

# QQ-Plot para Weibull
qqWeibullDeviance <- ggplot(dfWeibullDeviance, aes(sample = residuos)) +
  stat_qq(color = "#1f78b4", alpha = 0.6) +
  stat_qq_line(color = "red") +
  labs(title = "Modelo Weibull") +
  theme_minimal()

# Mostrar los 3 gráficos en una fila

qqComparacionDeviance <- arrangeGrob(qqCoxDeviance, 
            qqExpDeviance, 
            qqWeibullDeviance, 
             ncol = 3,
             top = "QQ-Plot residuos Deviance")


grid.arrange(qqCoxDeviance, 
            qqExpDeviance, 
            qqWeibullDeviance, 
             ncol = 3,
             top = "QQ-Plot residuos Deviance")

 ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Survival_graphs/grafico_QQPLOT_residuos_deviance.pdf", plot = , width = 10, height = 6)

plotsDeviance <- list()
variables = c("AGE", "B2M", "LDH","ALB", "MRI")
for (variable in variables) {
plotCox <- ggplot(data = Arkansas_SDF, aes_string(x = variable, y = "residuosDevianceCox")) +
  geom_point(color = "#1f78b4", alpha = 0.7) +
  geom_smooth(method = "loess", color = "red", se = TRUE) +
  labs(
    subtitle = "Modelo Cox",
    x = "",
    y = "Residuos de Deviance"
  ) +
  theme_minimal() + 
  theme(
    plot.title = element_text(hjust = 0.5, size = 16),
    plot.subtitle = element_text(hjust = 0.5, size = 10)
  )

plotExp <- ggplot(data = Arkansas_SDF, aes_string(x = variable, y = "residuosDevianceExp")) +
  geom_point(color = "#1f78b4", alpha = 0.6) +
  geom_smooth(method = "loess", color = "red", se = TRUE) +
  labs(
    subtitle = "Modelo Exponencial",
    x = "",
    y = ""
  ) +
  theme_minimal() + 
  theme(
    plot.title = element_text(hjust = 0.5, size = 16),
    plot.subtitle = element_text(hjust = 0.5, size = 10)
  )

plotWeibull<- ggplot(data = Arkansas_SDF, aes_string(x = variable, y = "residuosDevianceWeibull")) +
  geom_point(color = "#1f78b4", alpha = 0.6) +
  geom_smooth(method = "loess", color = "red", se = TRUE) +
  labs(
    subtitle = "Modelo Weibull",
    x = "",
    y = ""
  ) +
  theme_minimal() + 
  theme(
    plot.title = element_text(hjust = 0.5, size = 16),
    plot.subtitle = element_text(hjust = 0.5, size = 10)
  )

  plotComparacionDeviance <- arrangeGrob(
            plotCox, 
             plotExp, 
             plotWeibull, 
             ncol = 3,
             top = "Comparación residuos de Deviance",
             bottom = textGrob(variable, hjust = 0.5))

    plotsDeviance[[variable]] <- plotComparacionDeviance
  grid.arrange(plotsDeviance[[variable]])
}

for (variable in variables) {
  ggsave(filename = paste0("/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Survival_graphs/grafico_residuos_deviance_", variable, ".pdf"), plot = plotsDeviance[[variable]], width = 10, height = 6)
}
```

## Residuos Schoenfeld

```{r}
residuos_schoenfeld_no_parametrico <- cox.zph(modelo_backward)
residuos_schoenfeld_no_parametrico
```

Todos los valores p son mayores que 0.05, lo que indica que no hay evidencia suficiente para rechazar el supuesto de riesgos proporcionales para ninguna de las covariables.

## AIC

```{r}
# Calcular el AIC para cada modelo
aic_modelo_no_parametrico <- AIC(modelo_backward)
aic_modelo_exp <- AIC(modelo_exp_backward)
aic_modelo_weibull <- AIC(modelo_weibull_backward)

# Crear un data frame con los resultados de AIC
aic_resultados <- tibble(
  nombres_modelos = c("Modelo No Paramétrico", "Modelo Exponencial", "Modelo Weibull"),
  valor_aic = c(aic_modelo_no_parametrico, aic_modelo_exp, aic_modelo_weibull)
)

# Crear la tabla visual con `gt()`
tabla_aic <- aic_resultados %>%
  gt() %>%
  tab_header(
    title = "Comparación de AIC entre Modelos"
  ) %>%
  fmt_number(
    columns = "valor_aic",
    decimals = 2
  ) %>%
  cols_label(
    nombres_modelos = "Modelo",
    valor_aic = "Valor AIC"
  ) %>%
  tab_options(
    table.font.size = px(12),
    heading.title.font.size = px(18)
  )

# Mostrar la tabla
tabla_aic
```

# Concordancia

```{r}
# Calcular el C-Index para el modelo de Cox
concordance_cox <- concordance(modelo_backward)
cIndexCox <- concordance_cox$concordance

# Calcular el C-Index para el modelo Exponencial
concordance_exp <- concordance(modelo_exp_backward)
cIndexExp <- concordance_exp$concordance

# Calcular el C-Index para el modelo Weibull
concordance_weibull <- concordance(modelo_weibull_backward)
cIndexWeibull <- concordance_weibull$concordance
```

```{r}
# Calcular el GH-Index
ghIndexCox <- GHCI(pred_backward)
ghIndexExp <- GHCI(pred_exp)
ghIndexWeibull <- GHCI(pred_weibull)

resultadosIndices <- tibble(
  nombres_modelos = c("Modelo Cox", "Modelo Exponencial", "Modelo Weibull"),
  valorCIndex = c(cIndexCox, cIndexExp, cIndexWeibull), 
  valorGHIndex = c(ghIndexCox, ghIndexExp, ghIndexWeibull)
)

# Crear la tabla visual con `gt()`
tablaGHIndex <- resultadosIndices %>%
  gt() %>%
  tab_header(
    title = "Comparación del GH-Index entre Modelos"
  ) %>%
  fmt_number(
    columns = c("valorCIndex", "valorGHIndex"),  
    decimals = 4
  ) %>%
  cols_label(
    nombres_modelos = "Modelo",
    valorCIndex = "C-Index",  
    valorGHIndex = "GH-Index"
  ) %>%
  tab_options(
    table.font.size = px(15),
    heading.title.font.size = px(18)
  )

# Mostrar la tabla en RStudio
tablaGHIndex
```


```{r}
tiempos = c(5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100)
# Crear el objeto timeROC para el modelo backward
roc_backward <- timeROC(
  T = Arkansas_SDF$OS_Time, 
  delta = Arkansas_SDF$OS_Censor, 
  marker = pred_backward, 
  cause = 1, 
  weighting = "marginal", 
  times = tiempos
)
# Crear el objeto timeROC para el modelo backward
roc_exp <- timeROC(
  T = Arkansas_SDF$OS_Time, 
  delta = Arkansas_SDF$OS_Censor, 
  marker = pred_exp, 
  cause = 1, 
  weighting = "marginal", 
  times = tiempos
)
# Crear el objeto timeROC para el modelo backward
roc_weibull<- timeROC(
  T = Arkansas_SDF$OS_Time, 
  delta = Arkansas_SDF$OS_Censor, 
  marker = pred_weibull, 
  cause = 1, 
  weighting = "marginal", 
  times = tiempos
)
# Extraer las AUC de los objetos timeROC
roc_backward_auc <- roc_backward$AUC  # AUC para cada tiempo del modelo backward
roc_exp_auc <- roc_exp$AUC            # AUC para el modelo exponencial
roc_weibull_auc <- roc_weibull$AUC    # AUC para el modelo Weibull

# Crear el marco de datos con las AUC
data <- data.frame(
  x = rep(roc_backward$times, 3),  # Los tiempos son iguales para todas las curvas
  y = c(roc_backward_auc, roc_exp_auc, roc_weibull_auc),  # Combina las AUC de las curvas
  curva = rep(c("Modelo Cox", "Modelo Exponencial", "Modelo Weibull"), 
              each = length(roc_backward$times))  # Identificar cada curva
) 

grafico_comparacion_auc <- ggplot(data, aes(x = x, y = y, color = curva)) +
  geom_line(size = 1.2) +      
  geom_point(size = 3) +
  labs(title = "", 
       x = "Tiempo", 
       y = "AUC", 
       color = "Modelos") +     
  scale_color_manual(values = c("Modelo Cox" = "#1f77b4", 
                                "Modelo Exponencial" = "#ff7f0e", 
                                "Modelo Weibull" = "#2ca02c")) + # Colores personalizados
  theme_minimal() +
  theme(legend.position = "none",
      axis.text.x = element_text(size = 18),  # Tamaño del texto del eje X
  axis.text.y = element_text(size = 18),  # Tamaño del texto del eje Y
  axis.title.x = element_text(size = 18), # Tamaño del título del eje X
  axis.title.y = element_text(size = 18) 
  )

grafico_comparacion_auc
grafico_comparacion_auc_amplio <- grafico_comparacion_auc + 
  ylim(0,1) +
  theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
  axis.text.x = element_text(size = 18),  # Tamaño del texto del eje X
  axis.text.y = element_text(size = 18),  # Tamaño del texto del eje Y
  axis.title.x = element_text(size = 18), # Tamaño del título del eje X
  axis.title.y = element_text(size = 18),  # Tamaño del título del eje Y
  legend.text = element_text(size = 21),
  legend.title = element_text(size = 16),
  legend.position = "right"
)+ 
  labs(y = "")
grafico_comparacion_auc_amplio
# Guardar el gráfico de comparación de AUC
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Survival_graphs/grafico_comparacion_auc.pdf", 
       plot = grafico_comparacion_auc, 
       width = 10, height = 7, device = "pdf")

# Guardar el gráfico de comparación de AUC
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Survival_graphs/grafico_comparacion_auc_amplio.pdf", 
       plot = grafico_comparacion_auc_amplio, 
       width = 10, height = 7, device = "pdf")
```

```{r}

grafico_OS_Time = Arkansas %>%
  ggplot(aes(x = OS_Time)) +
  geom_histogram(fill = "#1f78b4", color = "black", alpha = 0.9, bins = 20) +

  # Títulos
  ggtitle("Distribución de OS_Time",subtitle = "") +
  labs(x = "Tiempo (meses)", y = "Frecuencia") +
  scale_x_continuous(breaks = pretty_breaks(n = 10)) + 
  theme_classic() +
    theme(
  plot.title = element_text(size = 20, face = "bold", hjust = 0.5), # Título principal
  axis.text.x = element_text(size = 14),  # Tamaño del texto del eje X
  axis.text.y = element_text(size = 14),  # Tamaño del texto del eje Y
  axis.title.x = element_text(size = 18), # Tamaño del título del eje X
  axis.title.y = element_text(size = 18)  # Tamaño del título del eje Y
)
   # Añadir el recuadro con la proporción

grid.arrange(grafico_comparacion_auc, grafico_OS_Time)

```



PARA EL MODELO FINAL
```{r}

# Generar predicciones del riesgo lineal (linear predictor) para el modelo
pred_backward <- predict(modelo_backward, type = "lp")

# Crear el objeto timeROC para el modelo backward
roc_backward <- timeROC(
  T = Arkansas_SDF$OS_Time, 
  delta = Arkansas_SDF$OS_Censor, 
  marker = pred_backward, 
  cause = 1, 
  weighting = "marginal", 
  times = seq(5, 100, by = 15) # Cambia los tiempos según tu análisis
)

# Crear una escala de colores para los tiempos (azul claro a azul oscuro)
color_scale <- colorRampPalette(brewer.pal(9, "Blues"))(length(roc_backward$times))

# Graficar la curva ROC para el modelo backward
plot(roc_backward, 
     time = roc_backward$times[1], # Primer tiempo
     col = color_scale[1], 
     lwd = 2, 
     title = "Curvas ROC en diferentes tiempos (Modelo Backward)")

# Superponer las demás curvas ROC al gráfico
for (i in 2:length(roc_backward$times)) {
  plot(roc_backward, 
       time = roc_backward$times[i], 
       col = color_scale[i], 
       lwd = 2, 
       add = TRUE) # Superponer las curvas
}

# Añadir una leyenda para identificar los tiempos
legend("bottomright", 
       legend = paste("Tiempo =", roc_backward$times), 
       col = color_scale, 
       lwd = 2, 
       cex = 0.8, # Ajustar tamaño de texto si es necesario
       title = "Leyenda de tiempos")

```
### Comprobación de los protocolos estándares

```{r}
Arkansas_SDF <- Arkansas_SDF %>%
  mutate(
    ISS = case_when(
      B2M < 3.5 & ALB >= 3.5 ~ "ISS I",
      B2M >= 5.5 ~ "ISS III",
      TRUE ~ "ISS II"
    )
  )

Arkansas_SDF <- Arkansas_SDF %>%
  mutate(
    R_ISS = case_when(
      ISS == "ISS I" & Cyto_Abn == 0 & LDH_flag == 0 ~ "R-ISS I",
      ISS == "ISS III" | Cyto_Abn == 1 | LDH == 1 ~ "R-ISS III",
      TRUE ~ "R-ISS II"
    )
  )
```

```{r}
grafico_ISS <- ggsurvplot(
  survfit(Surv(OS_Time, OS_Censor) ~ ISS, data = Arkansas_SDF), 
  data = Arkansas_SDF, 
  pval = TRUE,
  palette = c("#0072B2", "#D95F02", "#F0E442", "#999999"),  # Define la paleta de colores
  legend.labs = c("Estadio 1", "Estadio 2", "Estadio 3"),  # Texto de la leyenda
  xlab = "Tiempo (meses)",  # Cambiar texto del eje X
  ylab = "Probabilidad de supervivencia (%)",  # Cambiar texto del eje Y
  title = "ISS"
  )

grafico_ISS <- grafico_ISS$plot +  
  theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
  axis.text.x = element_text(size = 18),  # Tamaño del texto del eje X
  axis.text.y = element_text(size = 18),  # Tamaño del texto del eje Y
  axis.title.x = element_text(size = 18), # Tamaño del título del eje X
  axis.title.y = element_text(size = 18),  # Tamaño del título del eje Y
  legend.text = element_text(size = 20),
  legend.title = element_text(size = 16)
)+ 
  guides(color = guide_legend(override.aes = list(linetype = 0, shape = 15, size = 5)))

grafico_ISS

```

```{r}
grafico_RISS <- ggsurvplot(
  survfit(Surv(OS_Time, OS_Censor) ~ R_ISS, data = Arkansas_SDF),
  data = Arkansas_SDF, 
  pval = TRUE,
  palette = c("#0072B2", "#D95F02", "#F0E442", "#999999"),  # Define la paleta de colores
  legend.labs = c("Estadio I", "Estadio II", "Estadio III"),  # Texto de la leyenda
  xlab = "Tiempo (meses)",  # Cambiar texto del eje X
  ylab = "Probabilidad de supervivencia (%)",  # Cambiar texto del eje Y
  title = "R-ISS"
  )


grafico_RISS <- grafico_RISS$plot +  
  theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
  axis.text.x = element_text(size = 18),  # Tamaño del texto del eje X
  axis.text.y = element_text(size = 18),  # Tamaño del texto del eje Y
  axis.title.x = element_text(size = 18), # Tamaño del título del eje X
  axis.title.y = element_text(size = 18),  # Tamaño del título del eje Y
  legend.text = element_text(size = 20),
  legend.title = element_text(size = 16)
)+ 
  guides(color = guide_legend(override.aes = list(linetype = 0, shape = 15, size = 5)))

grafico_RISS
```
```{r}
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Survival_graphs/grafico_ISS.pdf", 
       plot = grafico_ISS, 
       width = 10, height = 7, device = "pdf")
ggsave(filename = "/Users/marc/Downloads/TFG/R/TFGMarcArrom/Output/Graphs_tables/Survival_graphs/grafico_RISS.pdf", 
       plot = grafico_RISS, 
       width = 10, height = 7, device = "pdf")
```

# OTROS

```{r}

grafico_B2M_puntos <- ggplot(Arkansas, aes(x = 1:564)) +
  geom_point(aes(y = B2M), color = "#56B4E9", size = 2, alpha = 0.9) +
  annotate("rect", xmin = -2, xmax = 570, ymin = 0, ymax = 2.7, alpha = 0.35,, fill = "lightgreen") +  # Cambiado el color del rectángulo
  geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = 0, ymax = 0, fill = "Niveles Normales"), ) +
  scale_fill_manual(name = " ", values = "lightgreen" )+
  labs(title = "Diagrama de puntos de B2M",
       subtitle = "*Algunos valores no han sido representados \n por ser demasiado elevados",
       x = NULL,  # Eliminar etiqueta del eje x
       y = "B2M") +
  ylim(-1, 15) +  # Ajuste del eje Y
geom_text(aes(x = numero_observaciones/2 , y = -1, 
              label = paste("Sanos: ", proporcionB2M_sano ,"\n","Mal: ", proporcionB2M_mal)),
          size = 4, color = "black")+
  theme_minimal() +
  theme(
    axis.title.x = element_blank(),  # Eliminar título del eje x
    axis.text.x = element_blank()     # Eliminar texto del eje x
  )
grafico_B2M_puntos
```

```{r}
library(GGally)
 d_b<- Arkansas %>%
  dplyr::select(SEX,B2M,CRP,CREAT, LDH, ALB,HGB)
d_b %>% ggpairs(aes(color = SEX ,alpha = 0.7),
        upper = list(continuous = wrap("cor", size = 2.5)))
names(Arkansas)
```



```{r}
ggplot(Arkansas, aes(x = AGE)) +
  geom_histogram(binwidth = 5, fill = "#56B4E9", color = "black") +
  labs(title = "Distribución de la Edad", x = "Edad (en meses)", y = "Frecuencia") +
  theme_minimal()+
  geom_segment(aes(x = quantile(Arkansas$AGE, 0.25), y = -1, yend = 115 , xend = quantile(Arkansas$AGE, 0.25)), linetype = 2, linewidth = 0.8) +
  annotate(geom = "text", x = quantile(Arkansas$AGE, 0.25), y = 120, label = "Q1") 
```

